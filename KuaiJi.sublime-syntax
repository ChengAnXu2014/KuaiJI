%YAML 1.2
---
file_extensions:
  - kj
scope: string source.kuaiji

variables:
  platname: 'XML|HTML|YAML|Xml|Html|Yaml|xml|html|yaml|C|c|Python|python|JSON|Json|json|JAVA|Java|java|JavaScript|javascript|js|JS|Js|GIT|git|Git|index|Index|Head|HEAD'
  wordprefix: '(?<![A-z0-9_])'
  wordsufix: '(?![A-z0-9_])'
  identifier: '{{wordprefix}}[A-z_][A-z0-9_]*{{wordsufix}}'
  argsufix: '[''"A-z0-9\[\]<> ,{}*=_-]*\)'
  term: 'bits?|byte|words?|flag|pair|[iI]d|ID'
  commonvar: 'int|char|str|bool|double|float|long|short|signed|unsigned|void|var'
  mudule: 'numbers|string|re|os(\.path)?|sys|math|cmath'
  class: 'Edit|Region|Selection|View|Window|Sublime(?! [Tt]ext)|Sublime_plugin|Settings|(?<=numbers\.)Real|(?<=numbers\.)Integral'
  instance: 'edit|point|region|selection|view|window|sublime(?! [tT]ext)|sublime_plugin|settings|vector'
  property: '(?<=sys\.)byteorder'
  constname: 'self|false|true|FALSE|TRUE|False|True|None|none|NONE|NULL|null|Null|'
  platvar: 'buffer|complex|list|dict|tuple|memoryview|bytes|bytearray'
  platfunction: 'classmethod|staticmethod'
  keyctrl: 'import|if|for|while|else|elif|continue|break|return'
  keyopr: 'not|and|or|is|in'

contexts:
  main:
    - match: '^!: '
      scope: invalid.illegal
    - match: '^\.+[^.].*:$'
      scope: invalid.illegal
    - match: '^-.*:$'
      scope: markup.bold comment
      push: list
    - match: '^ .*:$'
      scope: markup.italic comment
    - match: '`[^`]*`'
      scope: comment markup.italic


    - match: '([0-9][0-9.]*[0-9])|[0-9]'
      scope: constant.numeric
    - match: 'r?[bu]?(?=[''"])'
      scope: storage.type.string



    - match: '{{wordprefix}}({{term}}){{wordsufix}}'
      scope: constant.numeric variable.function source.yaml string.unquoted.plain.out.yaml markup.italic
    - match: '{{wordprefix}}({{mudule}}){{wordsufix}}'
      scope: constant.numeric variable.function source.yaml string.unquoted.plain.out.yaml
    - match: '[-+=/*%]|{{wordprefix}}({{keyopr}}){{wordsufix}}'
      scope: keyword.operator
    - match: '{{wordprefix}}({{platname}}){{wordsufix}}'
      scope: constant.numeric variable.function source.yaml string.unquoted.plain.out.yaml
    - match: '{{wordprefix}}({{keyctrl}}){{wordsufix}}'
      scope: keyword.control
    - match: '{{wordprefix}}({{platvar}}){{wordsufix}}'
      scope: support.type
    - match: '{{wordprefix}}({{platfunction}}){{wordsufix}}'
      scope: support.function
    - match: '{{wordprefix}}({{property}}){{wordsufix}}'
      scope: entity.name.class markup.italic
    - match: '{{wordprefix}}({{instance}}){{wordsufix}}'
      scope: entity.name.class markup.italic
    - match: '{{wordprefix}}({{class}}){{wordsufix}}'
      scope: entity.name.class
    - match: '{{wordprefix}}({{commonvar}}){{wordsufix}}'
      scope: storage.type
    - match: '{{wordprefix}}({{constname}}){{wordsufix}}'
      scope: constant.language
    - match: '({{identifier}})\s*(\()(?={{argsufix}})'
      captures:
        1: entity.name.function
        2: variable.function
      push: args

  args:
    - match: '{{identifier}}'
      scope: variable.parameter
    - match: '([''])(.*)([''])'
      captures:
        1: punctuation.definition.string.begin
        2: string.quoted.single
        3: punctuation.definition.string.end
    - match: '(")(.*)(")'
      captures:
        1: punctuation.definition.string.begin
        2: string.quoted.double
        3: punctuation.definition.string.end
    - match: '='
      scope: keyword.operator
    - match: '\)'
      scope: variable.function
      pop: true

  list:
    - include: main
    - match: '^ .*?:'
      scope: markup.italic comment
    - match: '^$'
      pop: true
