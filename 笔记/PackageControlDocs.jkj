.End Users:

..Usage:
Package Control is driven by the Command Palette. To open the palette, press ctrl+shift+p (Win, Linux) or cmd+shift+p (Mac). All Package Control ..:ommands begin with Package Control:, so start by typing Package.

The command palette will now show a number of commands. Most users will be interested in the following:



...Install Package:
Show a list of all available packages that are available for install. This will include all of the packages from the default channel, plus any from repositories you have added. 



...Add Repository:
Add a repository that is not included in the default channel. This allows users to install and automatically update packages from GitHub and BitBucket. To add a package hosted on GitHub, enter the URL in the form https://github.com/username/repo. Don’t include .git at the end! BitBucket repositories should use the format https://bitbucket.org/username/repository. 



...Remove Package:
This removes the package folder, and the package name from the installed_packages list in `Packages/User/`Package Control.sublime-settings. The installed_packages list allow Package Control to automatically install packages for you if you copy your `Packages/User/` folder to another machine. 



By default Package Control checks for new versions on startup. This setting, plus the list of channels and repositories are managed through the Settings.
Other Commands



...Add Channel:
Adds another channel that lists repositories. This is uncommon, but allows users to create a custom channel of repositories to share. 



...Create Package File:
For package developers. Takes a package folder and generates(生成) a `.sublime-package` file that can be uploaded onto the web and referenced in the packages.json file for a repository. 



...Create Binary Package File:
For package developers. Creates a `.sublime-package` file that does not include the source .py files, but instead the `.pyc` bytecode files. This is useful to distribute(发布) commercial(收费的) packages. Be sure to check the resulting `.sublime-package` file to ensure that at least one .py file is included so that Sublime Text will load the package. 



...Disable Package:
Disables a package, which causes any Python scripts to be unloaded, and other files such as .sublime-keymap files to be unloaded also. 



...Discover Packages:
打开Package Control官网的插件选择页面。



...Enable Package:
Re-enables a package that has been disabled. 



...Upgrade/Overwrite All Packages:
This will upgrade ALL packages, including ones that were not installed via Package Control. If you are developing a custom copy of a package, you may not want to use this command. 



...Upgrade Package:
Show a list of packages that are available for upgrade and let the user pick which they would like to update. 



...Install Local Dependency:
Show a quick panel of folders in the `Packages/` that are not currently installed as dependencies, but have a .sublime-dependency file. Once a dependency is selected, a loader will be installed, allowing the dependency to be used for development, without having to submit it to the default channel first. 



...Package Control Settings - Default:
 这个现在用不了
Open the default settings file, which can be used as a reference for changing the User settings. Any changes to this file will be lost whenever Package Control is automatically or manually upgraded. 



...Package Control Settings - User:
 这个现在用不了
Opens the user’s settings for Package Control. Any settings changes should be saved here so they are not overwritten when a new version of Package Control is released. 

Browse Packages
© 2020





..Settings:
The default settings can be viewed by accessing(访问) the`Preferences > Package Settings > Package Control > Settings - Default` menu. To ensure settings are not lost when the package is upgraded, make sure all edits are saved to Settings - User.



...debug:
If set to true, will print HTTP headers and other debug information to the Sublime Text console.
Default false



...submit_usage:
If installs, upgrades and removals should be logged to the reporting URL. This data will be used to power the community package listing and will be displayed in aggregate(总数) only. No user-identifiable(可识别的) information is sent, just the: package name, operation, package version, package control version, sublime version and sublime platform.
Default yes



...submit_url:
Where the usage information should be sent to.
Default "https://packagecontrol.io/submit"



...installed_packages:
A list of packages that have been installed. Package Control will automatically install any packages in this list that are not currently installed, allowing this to be used for sharing package lists with other users. This setting is only tracked in Settings - User.
Default []



...channels:
A list of URLs that each contain a JSON file with a list of repositories. The repositories from these channels are placed in order after the repositories from the repositories setting.
Default ["https://packagecontrol.io/channel_v3.json"]



...repositories:
A list of URLs that contain a packages JSON file. These repositories are placed in order before repositories from the repository_channels setting.
Default []



...install_prereleases:
A list of packages to install pre-release versions for. Versions under 1.0.0 are not considered pre-release; only those using the SemVer -prerelease suffixes will be ignored if the package is not in this list.
Default []



...package_name_map:
This helps solve naming issues where a repository is not named the same as the package should be. This is primarily only useful for GitHub and BitBucket repositories. This mapping will override the mapping that is retrieved from the repository channels.
Default {}



...auto_upgrade:
If packages installed via Package Control should be checked for updates when Sublime Text starts. Updates will be automatically installed.
Default true



...auto_upgrade_frequency:
frequency ˈfriːkwənsi 频率
The number of hours to wait before trying to auto upgrade packages again.
Default 6



...auto_upgrade_ignore:
Packages to exclude(排除在外) from the auto upgrade functionality.
Default []



...install_missing:
If set to false, will not automatically install packages from the installed_packages setting that are not present on the current machine. This is really only useful if you don’t want Sublime Text to connect to the internet without explicitly(明确地) requesting it. In that case you’ll want to set auto_upgrade to false also.
Default true



...timeout:
The HTTP timeout (in seconds) to use when downloading channels, repositories and packages.
Default 30



...cache_length:
The number of seconds to cache channel and repository metadata for.
Default 300



...http_cache:
If HTTP request responses(响应) should be cached.
Default true



...http_cache_length:
Number of seconds to cache HTTP responses(响应) for.
Default 604800



...http_proxy:
The proxy(代理) to use for HTTP requests. Should be in the form domainname(域名):port or ip:port.
Default ""



...https_proxy:
The proxy(代理) to use for HTTPS requests. If http_proxy is set and this settings is not, the value from http_proxy will be used. If set to false, then http_proxy will not be inherited. Should be in the form domainname(域名):port or ip:port.
Default ""



...proxy_username:
The username to use for proxy(代理) authentication(身份认证).
Default ""



...proxy_password:
The password to use for proxy(代理) authentication(身份认证).
Default ""



...user_agent:
The user agent(代理人) used by the various downloaders.
Default "Package Control v{version.number}"



...git_binary:
Custom path(s) to git binary for when it can’t be automatically found on the system and a package includes a .git metadata directory. Supports more than one path to allow users to sync settings across operating systems.
Default []



...git_update_command:
The parameters passed to git to update a package. The remote and branch will be automatically determined.
Default ["pull", "--ff", "--commit"]



...hg_binary:
Custom path(s) to hg binary for when it can’t be automatically found on the system and a package includes a .hg metadata directory. Supports more than one path to allow users to sync settings across operating systems.
Default []



...hg_update_command:
The parameters to pass to hg to update a package. Will always pull from the URL named default.
Default ["pull", "--update"]



...ignore_vcs_packages:
If git and hg repositories should be ignored when trying to update packages.
Default false



...downloader_precedence:
ˈpresɪdəns 优先权
The downloader backends(后端) that should be used for HTTP(S) requests, split(分裂) by operating system to allow for configuration to be shared.

Valid options include:`urllib`,`curl`,`wget`, (Windows-only)`wininet`.

This setting allows Windows users to bypass(绕过) wininet and use urllib instead if their machine or network presents trouble to wininet. Some Mac ..:nd Linux users have also reported better luck with certain proxies using curl or wget instead of urllib.

The`curl`and`wget`options require the command line curl or wget program installed and present in the PATH.
Default

{
		"windows": ["wininet"],
		"osx": ["urllib"],
		"linux": ["urllib", "curl", "wget"]
}



...dirs_to_ignore:
A list of folders to ignore when creating a `.sublime-package` file.
Default [".hg", ".git", ".svn", "_darcs", "CVS"]



...files_to_ignore:
A list of file glob patterns to ignore when creating a `.sublime-package` file by the Create Package command.
Default [".hgignore", ".gitignore", ".bzrignore", "*.pyc", "*.sublime-project", "*.sublime-workspace", "*.tmTheme.cache"]



...files_to_include:
A list of file glob patterns to include when creating a `.sublime-package` file by the Create Package command. This overrides files_to_ignore.
Default []



...package_destination:
The folder to copy a newly created package to. Default to the user’s Desktop if blank. Setting this destination to the Installed Packages directory will cause your source code changes to be overwritten when Sublime Text restarts!
Default ""



...package_profiles:
A way to create different packaging profiles(简介，概述) for different types of package releases, such as for different platforms or binary-only releases.

The key of the object will be the profile name and a list of them will be presenting when running the "Create Package File" command. The profile "Default" will use the top-level version on the following settings:
		"dirs_to_ignore"
		"files_to_ignore"
		"files_to_include"
		"package_destination"

If a profile does not include one of those three settings, it will fall back to the top-level settings.
Default

{
		"Binaries Only": {
		    // Exclude(排除在外) all .py files, but consequently(随之) include all .pyc files
		    "files_to_ignore": [
		        "*.py", ".hgignore", ".gitignore", ".bzrignore",
		        "*.sublime-project", "*.sublime-workspace", "*.tmTheme.cache"
		    ],

		    // Include __init__.py so Sublime Text will load the package
		    "files_to_include": [
		        "__init__.py"
		    ]
		}
}



...enable_tests:
Enable the ability to run the tests - this is only for development.
Default false

© 2020





..Syncing:
To properly(适当地) sync your installed packages across different machines, you actually do not want to sync the whole `Packages/` and Installed `Packages/` folders. The reason for this is that some packages have different versions for different operating systems. By syncing the actual package contents across operating systems, you will possibly run into broken packages.

The proper(适当的) solution is to install Package Control on all machines and then to sync only the `Packages/User/` folder. This folder contains the Package Control.sublime-settings file, which includes a list of all installed packages. If this file is copied to another machine, the next time Sublime Text is started, Package Control will install the correct version of any missing packages.



...Using Git:
Many developers are familiar with Git, and it is a logical choice for keeping files in sync across machines if you don't mind a little manual(手动的) work. There are a few things to keep in consideration when using Git:
If you use a service like GitHub and do not use a private repository, you may accidentally(意外地) share license keys for any commercial(收费的) packages you have purchased(购买).

Certain files and folders in the `Packages/User/` folder change regularly, so you may want to add them to a .gitignore file. There is really no harm in syncing these, however some of them change on an hourly basis, which may result in having to run more Git commands. Examples include:
		Package Control.last-run
		Package Control.ca-list
		Package Control.ca-bundle
		Package Control.system-ca-bundle
		Package Control.cache/
		Package Control.ca-certs/



...Using Dropbox:
`Dropbox` is another popular choice for syncing settings. It has the benefit(优点，好处) of automatically syncing files and not having to worry about privacy. In order to use this properly(适当地), symlinks must be set up via the command line. The following instructions(说明) should provide some guidance.


...On Windows:
These instructions(说明) work for Windows Vista and newer, but unfortunately(不幸地) do not work for Windows XP. If your `Dropbox` folder is not in the default location, you'll need to change $env:userprofile\Dropbox to your location with these steps:

 1: Close Sublime Text
 2: Open PowerShell by right-clicking and selecting Run as administrator

  First Machine:
On your first machine, use the following instructions(说明):

   Sublime Text 2:
cd "$env:appdata\Sublime Text 2\Packages\"
mkdir $env:userprofile\Dropbox\Sublime
mv User $env:userprofile\Dropbox\Sublime\
cmd /c mklink /D User $env:userprofile\Dropbox\Sublime\User

   Sublime Text 3:
cd "$env:appdata\Sublime Text 3\Packages\"
mkdir $env:userprofile\Dropbox\Sublime
mv User $env:userprofile\Dropbox\Sublime\
cmd /c mklink /D User $env:userprofile\Dropbox\Sublime\User

  Other Machine(s):
On your other machine(s), use the following instructions(说明). These instructions(说明) will remove your User/ folder and all contents!

   Sublime Text 2:
cd "$env:appdata\Sublime Text 2\Packages\"
rmdir -recurse User
cmd /c mklink /D User $env:userprofile\Dropbox\Sublime\User

   Sublime Text 3:
cd "$env:appdata\Sublime Text 3\Packages\"
rmdir -recurse User
cmd /c mklink /D User $env:userprofile\Dropbox\Sublime\User



...On Mac:
If your `Dropbox` folder is not in the default location, you'll need to change ~/Dropbox to your location:

 1: Close Sublime Text
 2: Open Terminal

  First Machine:
On your first machine, use the following instructions(说明):

   Sublime Text 2:
cd ~/Library/Application\ Support/Sublime\ Text\ 2/`Packages/`
mkdir ~/Dropbox/Sublime
mv User ~/Dropbox/Sublime/
ln -s ~/Dropbox/Sublime/User

   Sublime Text 3:
cd ~/Library/Application\ Support/Sublime\ Text\ 3/`Packages/`
mkdir ~/Dropbox/Sublime
mv User ~/Dropbox/Sublime/
ln -s ~/Dropbox/Sublime/User

  Other Machine(s):
On your other machine(s), use the following instructions(说明). These instructions(说明) will remove your User/ folder and all contents!

   Sublime Text 2:
cd ~/Library/Application\ Support/Sublime\ Text\ 2/`Packages/`
rm -r User
ln -s ~/Dropbox/Sublime/User

   Sublime Text 3:
cd ~/Library/Application\ Support/Sublime\ Text\ 3/`Packages/`
rm -r User
ln -s ~/Dropbox/Sublime/User



...On Linux:
If your `Dropbox` folder is not in the default location, you'll need to change ~/Dropbox to your location.

 1: Close Sublime Text
 2: Open Terminal

  First Machine:
On your first machine, use the following instructions(说明).

   Sublime Text 2:
cd ~/.config/sublime-text-2/`Packages/`
mkdir ~/Dropbox/Sublime
mv User ~/Dropbox/Sublime/
ln -s ~/Dropbox/Sublime/User

   Sublime Text 3:
cd ~/.config/sublime-text-3/`Packages/`
mkdir ~/Dropbox/Sublime
mv User ~/Dropbox/Sublime/
ln -s ~/Dropbox/Sublime/User

  Other Machine(s):
On your other machine(s), use the following instructions(说明). These instructions(说明) will remove your User/ folder and all contents!

   Sublime Text 2:
cd ~/.config/sublime-text-2/`Packages/`
rm -r User
ln -s ~/Dropbox/Sublime/User

   Sublime Text 3:
cd ~/.config/sublime-text-3/`Packages/`
rm -r User
ln -s ~/Dropbox/Sublime/User

© 2020





..Issues:
Are you having trouble using Package Control? Before opening an issue, please take the time to perform the following few steps. Properly(适当地) following directions will improve the likelihood of your issue being quickly resolved.

 1: Check to make sure you are using the latest version of Package Control: run the `Package Control: List Packages` command from the command palette
 2: Look at the Sublime Text Console (ctrl+`) to see if any python errors are listed
 3: Review the list of open GitHub issues to see if the problem you are experiencing has been reported
 4: Please do not comment on a Closed issue, but feel free to reference it from a new one

To provide the info necessary to help solve the issue, please generate a debug log. To do this:

 1: Open ``Preferences > Package Settings > Package Control > Settings - User`
 2: Add "debug": true to enable the debug log
 3: Restart Sublime Text
 4: Perform the command or operation you are having trouble with
 5: Copy the full contents of the Sublime Text Console
 6: Comment on an existing Open issue, or create a new one

View open issues on GitHub
© 2020





..Customizing Packages:
There will frequently(频繁地) be situations(情况) where a package works almost exactly how you want it to, however, a few small tweaks would make it perfect. Depending on what version of Sublime Text you are using and how the package is installed, you have a few different options for customizing a package.


...Packed vs. Unpacked:
Sublime Text 3 offers the most options for overriding a package. By default, packages will be installed by placing a `.sublime-package` file in the ``Installed `Packages/`` folder. Then users may override individual(个别的) files in the package by creating a folder ```Packages/{Package Name}/`` and placing edited files in there.

Unfortunately(不幸地) not all packages work when stored inside of a `.sublime-package` file. This is usually because the package includes files such as shared libraries or executables(可执行文件). If a developer places a file named .no-sublime-package in the root of their package, Package Control will extract(提取，解压缩) the package into ```Packages/{Package Name}/``.

Packages stored in `.sublime-package` files are referred to as packed, whereas(而) packages extracted(提取，解压缩) into a folder in ``Packages/` are referred to as unpacked. Sublime Text 2 only supports unpacked packages.

Unpacked packages can be customized via ``User Package`` or ``Git/Hg Clone``. Packed packages may use Overrides.


...Editing Unpacked Files:
Editing an unpacked package’s files is not a good idea unless you’ve cloned the package via Git/Hg. This is because, by default, Package Control will automatically upgrade packages to the newest version. This will cause any edits to files to be overwritten. If you experience this, you may wish to check out the ``Backups`` section to learn how to recover(恢复) your customized version of a file.


...User Package:
The `Packages/User/` folder is the User package. It is unique in that it is loaded last by Sublime Text. This allows users to place changes to .sublime-settings and .sublime-keymap files in this folder.

Sublime Text loads these files by name. Thus if a package has a file named `Package Control.sublime-settings` in the package, a file with the same name in the User package will override any of the settings in the original(原始的) file. The same is true for key bindings.


...Overrides:
If a package for Sublime Text 3 is installed as a packed package, it should be possible to directly override individual(个别的) non-python files. To do this, create a `Packages/{Package Name}/` folder and save customized versions of the files with the same name they are in the `.sublime-package` file.

To view the original(原始的) files, you can view the repository online for packages from GitHub or BitBucket, or use a zip program to unpack the `.sublime-package` file.


...Git/Hg Clone:
For complete customization of a package, it will likely be necessary to use a version control program, such as Git or Hg, to clone a copy of the original(原始的) package repository into the `Packages/` folder.

The best way to make customizations would be to fork the original(原始的) repository and clone your fork of it. If you think your customizations could be useful to others, consider sending a pull request to have your changes merged into the original(原始的) version.

If you’ve cloned it from your own fork of the repository, no settings need to be changed. If you clone it from the original(原始的) repository, you will likely want to set the ``ignore_vcs_packages`` setting.

There are a number of settings that control how packages are upgraded if you have cloned a repository and not set ``ignore_vcs_packages`` to false. These include: ``git_binary``, ``git_update_command``, ``hg_binary``, ``hg_update_command``.


...Backups:
If you do ever find yourself in a situation(情况) where your edits to a package were overwritten by Package Control, you can find a backup copy in the `Backup/` folder. This folder can be located by selecting the ``Preferences > Browse Packages…` menu and then browsing up a folder. Backups are stored in timestamped(时间戳) folders.
© 2020





.Package Developers:

..Submitting A Package:
插件名中不能有'.'因为Python语言将'.'视作文件夹分隔符。

插件名中不能有'<, >, :, ", /, \, |, ?, *'等限定字符。

尽量只用ASCII编码包含的字符，否则会很难被搜索到；比如像'résumé'这样的名称，通过输入'resume'是搜索不到的。

使用GitHub或BitBucket维护插件时，必须为每个版本添加一个和版本名同名的tag

删除.pyc文件(Python中间编译文件)
删除package-metadata.json文件(pkgctrl安装插件时自动生成的)
确保所有文件名中不包含'<, >, :, ", /, \, |, ?, *'

如果包含可执行或共享lib，在你的repository根目录添加一个'.no-sublime-package'文件，这样可以阻止PkgCtrl把你的插件打包成'`.sublime-package`'文件


Submitting a Package

One of the biggest reasons developers love Sublime Text is because of the package ecosystem(生态系统) that has developed. Package Control not only helps to make installing packages easier, but also has the goal(目标) of indexing all of the available packages.

If you’ve taken the time to develop a package, please consider adding it to the default Package Control channel so users can easily install and keep your package up-to-date.



...Reviewing Existing Packages:
Visit the Search page and look for similar packages.
Try to improve an existing package before adding another. When possible we strongly encourage working with an existing package maintainer(维护者) to add functionality or tweak(微调) a package rather than proliferating(增殖) lots of very similar options. This is especially true if your package is very simple.



...Pick a Name:
Try not to use the word Sublime in your package name. Every package available via Package Control is for Sublime Text. Using the word Sublime just adds noise to the list when trying to find packages. You can use the word Sublime in your marketing-material(推销材料), but omit(删除，省略) it in the package list, e.g. Sublime SFTP.
Don’t use a name too similar to another. We don’t want Todo and T0d0.
Use CamelCase(驼峰模式) or underscore_notation(下划线模式). Other Python packages in ST3 will be able to more easily interact(互动) with it. Additionally, the search indexer will properly(适当地)(适当地) split(分裂) words, making search results more accurate(精确). Obviously(明显地) this does not matter if your package name is a single word or contains no Python.
Do not use a . in the package name. If your package includes any Python code, it will not load in ST3. This is because Python uses . as a folder separator when importing code.
Do not use a / or other restricted(限定) characters in the package name. Package names are used as part of a file or folder name, depending on what version of Sublime Text the user is using. Invalid characters include: <, >, :, ", /, \, |, ? and *.
Use ASCII only if possible. The quick panel that Package Control uses in Sublime Text for selecting packages does not do match characters with diacritics unless they are entered by the user. Thus a user searching for resume will not find résumé.
Check hard-coded references. The package name is (effectively) used as the package folder name. Any file path references in a theme or Python code must use this package folder name. Be sure your local package folder name matches. See the .no-sublime-package file discussed in step 5 if you need to ensure files are always unpacked into a folder.



...Decide how to Host:
You‘ll need to pick one of the following two hosting options:
1.Use a public GitHub or BitBucket repository. Only include one package per repository and be sure the root of the package is the root of the repository.

2.Host `.sublime-package` files and a packages.json on a web server with SSL. For each release you’ll need to create and upload a new package file and update the packages.json information. Hosting of the files must be done on a secure(可靠的) server to help ensure the security of users’ machines. Unsecure URLs could lead to malicious(恶意的) code being loaded and run. This is rarely(很少地) used - see `example-repository.json` for documentation.

No matter how your package is hosted, Package Control will check it for updates approximately(大约) once per hour. The Last Seen date on the package detail page of this site(网站) will show the last time (UTC) when the package information was refreshed(刷新).





...Pick a Versioning Strategy(策略):
If you are using GitHub or BitBucket for your hosting, you will need to create a tag each time you want to make a new version available to users. The tag names must be a semantic version number.

Please note that branch-based releases have been deprecated(强烈反对的)(已弃用) and no new packages will be accepted that utilize(使用)(利用) that feature(功能). Existing packages are encouraged to update to using tags.

If you chose manual(手动的)(手动的) package hosting, you will need to use semantic versioning in your packages.json file.



...Prepare Your Repository:
Remove any .pyc files from your repository. Sublime Text will generate the appropriate(适当的)(适当的) .pyc files the first time the package is loaded. Also, different versions of Python use different formats.

Remove package-metadata.json. This is automatically generated by Package Control when a package is installed and should not be in your repository.

Check file names. Windows has the most restrictive rules on valid characters in a file name. Be sure file names do not contain characters including: <, >, :, ", /, \, |, ? and *. Non-ASCII characters may present trouble when developing cross-platform packages.

If including executables(可执行文件)(可执行的) or shared libraries, add a .no-sublime-package file. Adding this file to the root of your repository will prevent Package Control from keeping your package packed as a `.sublime-package` file in ST3.



...Add Your Repository to the Default Channel:
Fork(分支) the Package Control Channel
Clone your fork(分支) to your machine
Open the `package_control_channel/` folder with Sublime Text

Add package info based on the type of hosting:
		GITHUB/BITBUCKET HOSTING: Add your package info to the proper(适当的)(恰当的) JSON file in repository/ folder.

		Example of GitHub hosting:
		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		}

		Example of BitBucket hosting:
		{
			"name": "Alignment",
			"details": "https://bitbucket.org/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		}

		For other options, please read the documentation in the `example-repository.json` file.
		Please note that the version, url and date sub-fields(子字段) are not allowed in the centralized(集中的)(集中的) channel.
		If you wish to use these, you must host your own packages.json.



...MANUAL(手动的) HOSTING:
		Add the URL for your packages.json file to `channel.json`. See `example-repository.json` for documentation about the structure of the packages.json file.

Add the platforms key to your releases if necessary.

		..Package that only works on Mac and Linux:
		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"platforms": ["osx", "linux"],
					"tags": true
				}
			]
		}

		Package that only works on Windows

		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"platforms": ["windows"],
					"tags": true
				}
			]
		}



...Run the Tests:
Install the ChannelRepositoryTools package via Package Control.
Run the ChannelRepositoryTools: Test Default Channel command from the command palette and ensure the tests pass.



...Submit a Pull Request:
Browse to your fork(分支) on github.com
Click on Pull Requests in the right-hand nav and click New Pull Request
Enter a description in the Title field
Click the Create pull request button

Please be patient as your pull request is reviewed. We review changes to try and help prevent duplicate packages, spot common errors and help improve the package experience(经验) for users.
© 2020
How long






The `channel.json`, `repository.json` and `repository/*.json` files contain a list of repositories and packages for use with Package Control.

The `channel.json` file is published at https://packagecontrol.io/channel_v3.json and is included with Package Control as the default channel.

Please be sure to follow the instructions(说明) at https://packagecontrol.io/docs/submitting_a_package to help the process of adding your package or repository go smoothly.






...example-repository.json:
ps:插件名必须按字母顺序排列！！！！！
{
	// 本JSON文件中不允许有注释，所以在使用本模板前请先删除所有的注释

	"schema_version": "3.0.0",

	// Packages can be specified with a simple URL to a GitHub or BitBucket repository, but details can be overridden for every field.
	//It is also possible not utilize(使用) GitHub or BitBucket at all, but just to host your packages on any server with an SSL certificate(证书).
	"packages": [

		// This is what most packages should aim to model(模型).

		// The majority(大多数) of the information about a package ("name", "description", "author") are all pulled from the GitHub (or BitBucket) repository info.

		// If the word "sublime" exists in the repository name, the name can be overridden by the "name" key.

		// All packages must have one or more "releases".
		//Releases are generated from the the tags that are semantic versioning version numbers.

		// A release MUST contain a "sublime_text" version selector. Use "*" for all versions.

		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// Here is an equivalent package being pulled from BitBucket
		{
			"name": "Alignment",
			"details": "https://bitbucket.org/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// Pull most details from GitHub, releases from tags.
		// No custom field overrides.

		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// Pull most details from a BitBucket repository and releases from tags.
		// No custom field overrides.
		{
			"details": "https://bitbucket.org/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// Use a custom "name" instead of just the URL slug
		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// You can also override the "homepage" and "author"
		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"homepage": "http://wbond.net/sublime_`packages/`alignment",
			"author": "wbond",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// The "author" may be a list of values
		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"author": ["wbond", "jsmith"],
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},





...readme:
		// It is possible to provide the URL to a readme file.
<<aaaassss>>
		// This URL should be to the raw(未加工的) source of the file, not rendered(提供) HTML.

		// GitHub and BitBucket repositories will automatically provide these.

		// The following extensions will be rendered(提供):
		// .markdown, .mdown, .mkd, .md
		// .texttile
		// .creole
		// .rst

		// All others are treated as plaintext(纯文本).

		{
			"details": "https://github.com/wbond/sublime_alignment",
			"readme": "https://raw(未加工的).githubusercontent.com/wbond/sublime_alignment/master/readme.creole",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},




...bug tracker:
		// If a package has a public bug tracker, the URL of the bug tracker should be included via the "issues" key.

		// Both GitHub and BitBucket repositories will automatically provide this if they have issues enabled.

		{
			"details": "https://github.com/wbond/sublime_alignment",
			"issues": "https://github.com/wbond/sublime_alignment/issues",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},

		// The URL to "donate" to support the development of a package.

		// Used to default to Gittip/Gratipay, however they switched to a curated model(模型) so the default was removed.

		{
			"details": "https://github.com/wbond/sublime_alignment",
			"donate": "https://gratipay.com/wbond/",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},



...buy:
		// The URL to "buy" a license to the package

		{
			"details": "https://github.com/wbond/sublime_alignment",
			"buy": "https://wbond.net/sublime_`packages/`alignment/buy",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},




...previous names:
		// If you rename a package, you can provide the "previous_names" so that users with the old package name can be automatically upgraded to the new one.

		{
			"name": "Alignment",
			"details": "https://github.com/wbond/sublime_alignment",
			"previous_names": ["sublime_alignment"],
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},






...labels:
		// Packages can be labelled for the purpose of creating a folksonomy(通俗分类) so users may more easily find relevant packages.

		// Labels should be all lower case and should use spaces instead of _ or - to separate words.

		// Some suggested(推荐的) labels are listed below, however, anything can be used as a label:
		// auto-complete
		// browser integration(集成)
		// build system
		// code navigation(导航)
		// code sharing
		// color scheme
		// deprecated(强烈反对的)
		// diff/merge
		// editor emulation(模仿)//大概是模仿vscode IDE等主流编辑器风格的插件
		// file creation
		// file navigation(导航)
		// formatting
		// ftp
		// language syntax
		// linting(句法分析)
		// minification(缩小)
		// search
		// snippets(代码补全)
		// terminal/shell/repl
		// testing
		// text manipulation(操纵)
		// text navigation(导航)
		// theme
		// todo
		// vcs
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"labels": ["text manipulation(操纵)", "formatting"],
			"releases": [
				{
					"sublime_text": "*",
					"tags": true
				}
			]
		},




...添加依赖:
		// Mark a release as requiring one or more dependencies(依赖)
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"tags": true,
					"dependencies(依赖)": ["bz2"]
				}
			]
		},






		// DEPRECATED(强烈反对的).
		//In addition to the recommendation above of pulling releases from tags that are semantic version numbers, releases can also come from a branch.现在不支持了
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "*",
					"branch": "master"
				}
			]
		},





...Sublime Text版本筛选:
		// If your package is only compatible with specific builds of Sublime Text, this will cause the package to be hidden from users with incompatible versions.

		// The "tags" key can be true for all valid semantic version tags, or can be a prefix string. 

		//Only tags in the form {prefix}{semantic_version} will be selected.

		//In the example below, the entry with "sublime_text": "<3000" will match tags like:
		// "st2-1.0.0"
		// "st2-1.1.0"

		// 下例中的 "sublime_text": ">=3000" 意为版本号大于3000的
		// "st3-1.0.0" 由下例中的"tags": "st3-"筛选
		// "st3-1.1.0"
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"sublime_text": "<3000",
					"tags": "st2-"
				},
				{
					"sublime_text": ">=3000",
					"tags": "st3-"
				}
			]
		},





...platform筛选:
		// The "platforms" key allows specifying what platform(s) the release is valid for. As shown, there can be multiple releases of a package at any given time.

		// However, only the latest version for any given platform/arch will be shown to the user.

		// The "platforms" key allows specifying a single platform, or a list of platforms.

		//Valid platform indentifiers include:
		// "*"	all platforms
		// "windows", "windows-x64", "windows-x32"
		// "osx", "osx-x64"
		// "linux", "linux-x32", "linux-x64"

		// Only include the architecture suffix (-x32, -x64) if you are providing different packages for the different architectures.
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					// Defaults to "*", or all platforms.
					"platforms": ["osx", "linux"],
					"sublime_text": "*",
					"tags": "posix-"
				},
				{
					"platforms": "windows",
					"sublime_text": "*",
					"tags": "win32-"
				}
			]
		},



...base覆盖details:
		// If for some reason one of the releases is from a different repository
		// than the top-level "details" key, a "base" key may be specified in the release with the GitHub or BitBucket repository to use for tags.
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					"base": "https://github.com/wbond/sublime_alignment",
					"sublime_text": "<3000",
					"tags": true
				},
				{
					"sublime_text": ">=3000",
					"tags": true
				}
			]
		},




...手动版本控制:
		// If you don't use a "tags" key for a "releases" entry, you need to specify the "version", "url" and "date" manually.

		// Because this requires an update of the repository file for each release

		//it is not allowed in the default repository (wbond/package_control_channel).
		{
			"details": "https://github.com/wbond/sublime_alignment",
			"releases": [
				{
					// The version number needs to be a semantic version
					// number per http://semver.org 2.x.x
					"version": "2.0.0",

					// The URL needs to be a zip file containing the package.
					// It is permissible for the zip file to contain a single
					// root folder with any name. All file will be extracted(提取，解压缩)
					// out of this single root folder. This allows zip files
					// from GitHub and BitBucket to be used a sources.
					"url": "https://codeload.github.com/wbond/sublime_alignment/zip/v2.0.0",

					// The date MUST be in the form "YYYY-MM-DD HH:MM:SS" and
					// SHOULD be UTC
					"date": "2011-09-18 20:12:41",

					// The obligatory version selector
					"sublime_text": "*"
				}
			]
		}
	],

	// Packages that can be listed under "dependencies(依赖)" in under "releases" of a normal package.

	// These will typically be compiled Python extensions that are supplementary(补充的), or missing from Sublime Text.




...依赖列表:
	"dependencies(依赖)": [
		{
			// Each dependency(依赖) should have a "name", "load_order", "description", "author", "issues" URL and a list of "releases".

			// Each release needs a "version" and "url" or "base" and "tags" plus "sublime_text" keys.

			//The "platforms" key is optionally and defaults to "*".

			//If the URL is not over SSL, there needs to be a sha256 key containing the sha256 hash of the package file.
			"name": "bz2",
			"load_order": "02",
			"description": "Python bz2 module",
			"author": "wbond",
			"issues": "https://github.com/codexns/sublime-bz2/issues",
			"releases": [
				{
					"base": "https://github.com/codexns/sublime-bz2",
					"tags": true,
					"sublime_text": "*"
				}
			]
		},
		{
			"name": "ssl-linux",
			"load_order": "01",
			"description": "Python _ssl module for Linux",
			"author": "wbond",
			"issues": "https://github.com/codexns/sublime-ssl-linux/issues",
			"releases": [
				{
					"version": "1.0.0",
					"url": "http://packagecontrol.io/ssl-linux`.sublime-package`",
					"sublime_text": "*",
					"platforms": ["linux"],
					"sha256": "d12a2ca2843b3c06a834652e9827a29f88872bb31bd64230775f3dbe12e0ebd4"
				}
			]
		},
		{
			"name": "ssl-windows",
			"load_order": "02",
			"description": "Python _ssl module for Sublime Text 2 on Windows",
			"author": "wbond",
			"issues": "https://github.com/codexns/sublime-ssl-windows/issues",
			"releases": [
				{
					"version": "1.0.0",
					"url": "http://packagecontrol.io/ssl-windows`.sublime-package`",
					"sublime_text": "<3000",
					"platforms": ["windows"],
					"sha256": "efe25e3bdf2e8f791d86327978aabe093c9597a6ceb8c2fb5438c1d810e02bea"
				}
			]
		}
	],

	// If you need/want to split(分裂) your repository up into multiple smaller files for the sake(理由) of organization

	// the "includes" key allows you to enter URL paths that will be combined together and dynamically(动态地) inserted into the "packages" key.

	//These URLs these can be relative or absolute.
	"includes": [

		// Here is an example of how relative paths work for URLs.
		//If this file was loaded from:
		// "https://packagecontrol.io/example-repository.json"
		// then the following files would be loaded from:
		// "https://packagecontrol.io/repository/0-9.json"
		// "https://packagecontrol.io/repository/a.json"
		"./repository/0-9.json",
		"./repository/a.json",

		// An example of an absolute URL
		"https://packagecontrol.io/repository/b.json"
	]
}





..Renaming a Package:
The following guide will step you through the process of renaming a package you have submitted to Package Control.

 1: Review the New Name
Read the naming guidelines to make sure your new name will work.

 2: Fork the Channel
Fork the Package Control Channel.
Clone your fork to your machine
Open the `package_control_channel/` folder with Sublime Text

 3: Update the Repository
Remove your package entry from its old location. It will be in one of the JSON files in the `repository/` sub-folder of `package_control_channel/`.
Paste the package entry into the correct JSON file based on the new name. We keep package entries alphabetized(按字母排序) to reduce conflicts when merging pull requests.
Update the name key with the new name.

Add a previous_names key to the top-level JSON structure for your package. previous_names needs to be an array of strings. For example:
{
	"name": "AlignmentPlus",
	"previous_names": ["Alignment"],
	"details": "https://bitbucket.org/wbond/sublime_alignment",
	"releases": [
		{
			"sublime_text": "*",
			"tags": true
		}
	]
}

 4: Run the Tests
Install the ChannelRepositoryTools package via Package Control.
Run the ChannelRepositoryTools: ``Test Default Channel` command from the `command palette` and ensure the tests pass.

 5: Submit a Pull Request
Browse to your fork on github.com
Click on Pull Requests in the right-hand nav and click New Pull Request
Enter a description in the Title field
Click the Create pull request button





..Messaging:
If you’ve used many packages with Sublime Text and Package Control, you may have noticed situations(情况) where Package Control shows messages. Currently it is possible to show users a message when the package is installed, or after upgrades.

Messaging is controlled by a file named messages.json in the root of the package. The `example-messages.json` file shows the proper(适当的) structure of the JSON. Each value will be a file path that is relative to the package root. Each key will either be the string install or a version number.

When a package is installed, if the key install is present in the `messages.json` file, the value will be used as the file path to a txt file containing a message to display the user.

When a package is upgraded, Package Control looks through each key in the `messages.json` file and shows the content of the text file that is a value of any key that is higher than the previous version of the package the user has installed. Thus if the user had version 1.1.0 installed, the txt files for 1.2.0 and 1.1.1 would be shown. If the user had version 1.1.1 installed, only the messages for version 1.2.0 would be shown.
© 2020





..Channels and Repositories:
Channels are JSON files hosted on a URL that contains a list of repository URLs. See `example-channel.json` for the format. When a user requests to install a package, their channels are queried for a list of repositories. By default, a single channel is included with Package Control, https://packagecontrol.io/channel_v3.json. The only reason to create another channel is if you want to create a private distribution for a closed group of people.

Repositories are JSON files hosted on a URL that contain a list of one or more packages. See `example-repository.json` for the format. The JSON structure allows for specifying platforms (windows, osx, linux), compatible versions of Sublime Text, labels, URLs and more. The default channel includes a number of third-party repositories, but also a single, centralized(集中的) repository for developers who are using GitHub or BitBucket tag-based releases. This way a package only ever needs to be added to the repository once and almost all further updates to the package can be performed via the GitHub or BitBucket user interfaces.

 Upgrading Repositories to the Newest Schema Version:
The package ChannelRepositoryTools includes a command Upgrade Repository Schema (Current File) that will upgrade the currently open repository JSON to the newest schema_version.

Once the file has been upgraded, most packages can then be migrated(迁移) into the default repository. Most uses of custom repository JSON files were due to deficiencies(缺陷) with schema_version 1.2 and 2.0.
© 2020





..Dependencies:
One of the new features of Package Control 3.0(主版本号与ST同步？？？) is support for dependencies. Dependencies are non-user-visible packages that contain binaries, shared libraries or Python modules. Dependencies are not a way to install multiple related packages. Currently no such functionality exists.

 How They Work:
Similar to packages, dependencies are distributed through a repository. Dependencies are always fully extracted(提取，解压缩) to the user’s `Packages/` folder, using their name. Thus, dependency and package names exist in a single namespace. This means you can not have a dependency with the same name as a package.

Once the package is extracted(提取，解压缩), a custom-generated python file is added to a special package named 0_package_control_loader. For Sublime Text 3, this is a `.sublime-package` file, whereas(而) for Sublime Text 2 it is just a folder. The reason for the name (and creating it as a `.sublime-package` file in ST3) is to ensure it is the very first non-default package that Sublime Text loads.!:ST3启动时先加载安装时自带的默认package，然后加载安装的package；并且是按字母顺序加载的，0_package_control_loader这个名字是为了保证它是安装的package中最先加载的!

The generated python file looks for predefined subfolder names in the dependency folder, based on the user’s machine. Each matching subfolder that is found will be added to Python’s sys.path list, which is used to load modules.

The predefined subfolder names are in the formats: `st{st_version}_{os}_{arch}`, `st{st_version}_{os}`, `st{st_version}` and all. For example, with Sublime Text 3 on a 64-bit Linux machine the following subfolders will be checked:
  st3_linux_x64:Linux64位系统上的ST3
  st3_linux:lnux32位系统上的ST3
  st3:所有系统上的ST3
  all:所有系统上所有版本的ST

The valid list of Sublime Text versions is: `st2` and `st3`. The valid list of operating systems is: `windows`, `osx` and `linux`. The valid list of architectures is: `x32` and `x64`.

If for some reason you need different logic, create a single python file in the root folder of the dependency named `loader.code`. This file should contain python code and would be fully responsible for making any and all changes necessary to sys.path.

For ease-of-use during development of packages, a dependency may also have a .sublime-dependency file in the root of the package. This file should contain a two digit loader priority(优先权) for the dependency. This allows for dependencies to control where, relative to each other, they are added to the sys.path. If a dependency has no other dependencies, it may use a low priority(优先权) such as 01. For dependencies that need others, a higher number would be appropriate(适当的).



...Examples:
If the explanation(解释) of how dependencies work seems kind of abstract(抽象), take a moment and look at the following examples:
 bz2: a simple shared library that Package Control uses to obtain(获得) better compression(压缩) of the default channel
 cffi: another standard dependency that makes a shared library available to all platforms and architectures
 requests: a mirror of the requests module on pypi with pure Python code and a single code base
 ssl-linux: a complex example using loader.code to determine what version of OpenSSL a user has installed



...Publishing:
Like packages, dependencies are distributed through repositories and cached in channels. See `example-repository.json` for the basic documentation on how to add a dependency to the repository JSON.

The dependencies in the default repository are tracked in the file `repository/dependencies.json`. To add a new dependency, fork the channel and submit a pull request. Be sure to use the ChannelRepositoryTools to test your addition.

 Using Dependencies:
To mark a package as requiring one or more dependencies, there are two options:
  1: Add a dependencies key to one of the releases - docs
  2: Add a `dependencies.json` file to the root of the package - docs

The `dependencies.json` approach(方式) will likely be more convenient(方便) for package developers since they will not be installing their own packages from a channel or repository.
© 2020





..Events:
Package Control 3.0 adds an API for package developers to be able to more easily respond(回应，响应) to events that affect(影响) their packages. The events API is used in concert(音乐会) with the Sublime Text package load/unload handlers.

The following events can be detected:
  1: After Install
  2: Before Upgrade
  3: After Upgrade
  4: Before Removal

Please note that this API is only available starting with Package Control 3.0. Users who have not upgraded to 3.0 will not have the package_control modules available to all packages and errors will occur(发生，出现). In an effort(努力，尝试) to solve this issue, the old channel files for Package Control 1.x and 2.0 will only contain Package Control itself as of early January 2015. This will ensure that only Package Control 3.0 users will be installing and upgrading packages, making it possible for package developers to use the new events API and dependencies.

 Sublime Text Load/Unload Handlers:
The events API is a layer of extra(额外的) information that allows code being run inside of the Sublime Text 3 `plugin_loaded()` and `plugin_unloaded()` handlers. These handlers are automatically executed whenever a package is installed/enabled or removed/disabled, respectively.

Part of what makes these handlers applicable is that Package Control always disables and reenables packages when performing operations on them. This helps ensure that Sublime Text does not parse partially(部分地) extracted(提取，解压缩) file contents or retain(保持) a filesystem lock on files about to be written or removed.

Packages that run on Sublime Text 2 also have slightly different handlers. The example below will include code and comments showing how to support both ST2 and ST3.

 API:
The `events` API is located in the `package_control.events` module. It has four functions. Each of these functions returns either a string version number, or None if the package is not in the state specified.
  events.install("Package Name"): package was just installed
  events.pre_upgrade("Package Name"): package is about to be upgraded
  events.post_upgrade("Package Name"): package was just upgraded
  events.remove("Package Name"): package is about to be removed


 Example Code:
The following code should be located in one of the `.py` files in the root of your package.
`py
import sys


package_name = 'My Package'


def plugin_loaded():
from package_control import events

if events.install(package_name):
		print('Installed %s!' % events.install(package_name))
elif events.post_upgrade(package_name):
		print('Upgraded to %s!' % events.post_upgrade(package_name))


def plugin_unloaded():
from package_control import events

if events.pre_upgrade(package_name):
		print('Upgrading from %s!' % events.pre_upgrade(package_name))
elif events.remove(package_name):
		print('Removing %s!' % events.remove(package_name))


# Compat with ST2
if sys.version_info < (3,):
plugin_loaded()
unload_handler = plugin_unloaded
`
© 2020





..Creating Package Files:
If you are developing a package, and plan on doing custom repository hosting instead of using GitHub or BitBucket, Package Control includes the command Create Package to assist(协助) in creating `.sublime-package` files from your package directories(目录). This command is run via the command palette, and via the settings, allows you to customize what files are included in the output package file.

 Package Profiles:
Before running the Create Package command, take a moment to review the various settings that control the output. Package Control ships with two profiles(简介，概述), Default and Binaries Only. Here are the settings the control the Default profile:
  1: "dirs_to_ignore"
  2: "files_to_ignore"
  3: "files_to_include"
  4: "package_destination"

The ``package_profiles`` setting allows creating other named profiles(简介，概述) that can override each of the settings listed above. By default, a single custom profile is included: Binaries Only. Copy the settings from ``Preferences > Package Settings > Package Control > Settings - Default` into ``Preferences > Package Settings > Package Control > Settings - User` and customize to suit your needs.

 Running Create Package:
Running the `Create Package` command will prompt(提示) you to select a package to create the package file for. Next, it will ask you to choose what package profile you would like to use. Package Control will then create a `.sublime-package` file, add the package files to it and place it in the ``package_destination``.

 .pyc Files:
With Sublime Text 2, all python files are compiled into `.pyc` files by default by Sublime Text itself. This allows you to choose if you want to ship a binary-only package. Python 3 in Sublime Text 3 changes how Python scripts are compiled, storing them all in a `__pycache__/` folder, which doesn’t work if you are trying to ship a binary only package.

Because of this, Package Control explicitly(明确地) compiles all .py files into `.pyc` files, in the same directory, bypassing the `__pycache__/` for Sublime Text 3. So, while normally Python 2 and Python 3 are quite different when it comes to `.pyc` files, Package Control works around the issue. Please note, however, that it will still be required to ship a different version of the package for Sublime Text 2 and Sublime Text 3 since they use different `.pyc` formats. This can be accomplished(高完成度的) by running Create Package from Sublime Text 2 for an ST2-compatible version of the package, and running Create Package from Sublime Text 3 for an ST3-compatible version.
© 2020





..Code License:
Package Control is an open source project, which means you can read the source code, make your own modifications, or use parts of it in some other project. See the License section below for the specifics(细节).
https://github.com/wbond/package_control



...License:
Package Control is released under the MIT license. All of the python code other than `package_control/semver.py` is licensed as follows:
Copyright (c) 2011-2014 Will Bond <will@wbond.net>

Permission(许可) is hereby granted(授予), free of charge(代价), to any person obtaining(获得) a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction(限制), including without limitation the rights to use, copy, modify, merge, publish, distribute(发布), sublicense(转许可), and/or sell copies of the Software, and to permit(准许) persons to whom the Software is furnished(提供) to do so, subject(服从) to the following conditions:
The above copyright notice and this permission(许可) notice shall be included in all copies or substantial(大量的) portions of the Software.


THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY(担保) OF ANY KIND, EXPRESS(直白表示) OR IMPLIED(隐晦表示), INCLUDING BUT NOT LIMITED TO THE WARRANTIES(担保) OF MERCHANTABILITY(可销售性), FITNESS(健壮性) FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT(非侵权性). IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE(有责任的) FOR ANY CLAIM(索赔), DAMAGES OR OTHER LIABILITY(责任), WHETHER IN AN ACTION OF CONTRACT(合约), TORT(侵权行为) OR OTHERWISE, ARISING(产生) FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

`package_control/semver.py` is licensed as follows:
Copyright (c) 2013 Zachary King, FichteFoll

Permission(许可) is hereby granted(授予), free of charge(代价), to any person obtaining(获得) a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction(限制), including without limitation the rights to use, copy, modify, merge, publish, distribute(发布), sublicense(转许可), and/or sell copies of the Software, and to permit(准许) persons to whom the Software is furnished(提供) to do so, subject(服从) to the following conditions:
The above copyright notice and this permission(许可) notice shall be included in all copies or substantial(大量的) portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY(担保) OF ANY KIND, EXPRESS(直白表示) OR IMPLIED(隐晦表示), INCLUDING BUT NOT LIMITED TO THE WARRANTIES(担保) OF MERCHANTABILITY(可销售性), FITNESS(健壮性) FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT(非侵权性). IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE(有责任的) FOR ANY CLAIM(索赔), DAMAGES OR OTHER LIABILITY(责任), WHETHER IN AN ACTION OF CONTRACT(合约), TORT(侵权行为) OR OTHERWISE, ARISING(产生) FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

© 2020