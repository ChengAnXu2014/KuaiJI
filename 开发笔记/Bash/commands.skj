《《rm》》
 原型:rm [options] name1 name2 name3 ...

 options:
 -i: information;删除前逐一询问确认。
 -f: force;即使原档案属性设为唯读，亦直接删除，无需逐一确认。
 -r: recursively;将目录及以下之档案亦逐一删除。



《《alias》》

参数说明：若不加任何参数，则列出目前所有的别名设置。
实例

给命令设置别名

# alias lx=ls
# lx
anaconda-ks.cfg Desktop install.log install.log.syslog qte




在linux下为了更方便的输入命令，代替复杂的命令组合，可以使用alias来实现，但alias只能是当前有效，在退出bath后，刚设定的alias命令别名也就消失了。

如何才能永久使用了？请看下面：

首先如果想让别名能够在不同的shell会话中使用，就需要把它们添加到shell用来保存别名的文件中。大多数情况下，这个文件不是 .bashrc，就是.bash_aliases。

我使用的系统CentOS，是保存在.bashrc里。(或者可以在root家目录下输入：ls -a ~看到那个文件就是哪个了)

alias的命令格式为：alias [alias name]= '[command]' 如：alias mv='mv -i'

如果要永久保存，就把它给编辑到 /root/.bashrc下，然后:wq保存退出，但得重新加载别名文件，才能生效，可执行 # . .bashrc （见下面注释）

（这样更改后只有root用户的别名生效，要想普通用户有效，普通用户目录下的.bashrc也必需作同样的修改！）

先是一个点号（.），后
 
 

面跟着一个空格，之后是文件名（该文件名以点号作为开始）。现在新加的别名就能够运行了。因为每次增加新的别名后都需要重新加载别名文件，所以一次多增加几个别名，是个好主意。

 

linux alias 设置永久生效
编辑文件：/.bashrc

alias

cdhome='cd ~'

alias cdroot='cd /'

alias gpull='git pull'

alias gci='git commit -a'

alias gpush='git push origin HEAD:refs/for/master'

alias gst='git status'
alias dj='cd usr/python/lib/python3.7/site-packages'
保存文件后，运行:
source ~/.bashrc
(不然不生效）

就可以了。

如果还不行的话，说明没有~/.bash_profile文件，或者文件中没有执行.bashrc文件。

(.bash_profile文件是用户登陆终端的时候会自动执行的文件，一般此文件中会调用.bashrc)

如果是这样，需要打开（如果没有的话先创建）文件：
~/.bash_profile
在里面加入一行：
source ~/.bashrc

就ok了。

我在mac系统下测试ok的。

或者

vim /etc/profile

设定 alias 内容



《《find》》

Linux 命令大全 Linux 命令大全

Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。
语法

find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \;

参数说明 :

find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。

expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。

-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件

-amin n : 在过去 n 分钟内被读取过

-anewer file : 比文件 file 更晚被读取过的文件

-atime n : 在过去n天内被读取过的文件

-cmin n : 在过去 n 分钟内被修改过

-cnewer file :比文件 file 更新的文件

-ctime n : 在过去n天内被修改过的文件

-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name

-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写

-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写

-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。

-type c : 文件类型是 c 的文件。

d: 目录

c: 字型装置文件

b: 区块装置文件

p: 具名贮列

f: 一般文件

l: 符号连结

s: socket

-pid n : process id 是 n 的文件

你可以使用 ( ) 将运算式分隔，并使用下列运算。

exp1 -and exp2

! expr

-not expr

exp1 -or exp2

exp1, exp2
实例

将目前目录及其子目录下所有延伸档名是 c 的文件列出来。

# find . -name "*.c"

将目前目录其其下子目录中所有一般文件列出

# find . -type f

将目前目录及其子目录下所有最近 20 天内更新过的文件列出

# find . -ctime -20

查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：

# find /var/log -type f -mtime +7 -ok rm {} \;

查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：

# find . -type f -perm 644 -exec ls -l {} \;

为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：

# find / -type f -size 0 -exec ls -l {} \;




《《touch》》
Linux touch命令

Linux 命令大全 Linux 命令大全

Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。

ls -l 可以显示档案的时间记录。
语法

touch [-acfm][-d<日期时间>][-r<参考文件或目录>] [-t<日期时间>][--help][--version][文件或目录…]

    参数说明：
    a 改变档案的读取时间记录。
    m 改变档案的修改时间记录。
    c 假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。
    f 不使用，是为了与其他 unix 系统的相容性而保留。
    r 使用参考档的时间记录，与 --file 的效果一样。
    d 设定时间与日期，可以使用各种不同的格式。
    t 设定档案的时间记录，格式与 date 指令相同。
    --no-create 不会建立新档案。
    --help 列出指令格式。
    --version 列出版本讯息。

实例

使用指令"touch"修改文件"testfile"的时间属性为当前系统时间，输入如下命令：

$ touch testfile                #修改文件的时间属性 

首先，使用ls命令查看testfile文件的属性，如下所示：

$ ls -l testfile                #查看文件的时间属性  
#原来文件的修改时间为16:09  
-rw-r--r-- 1 hdd hdd 55 2011-08-22 16:09 testfile  

执行指令"touch"修改文件属性以后，并再次查看该文件的时间属性，如下所示：

$ touch testfile                #修改文件时间属性为当前系统时间  
$ ls -l testfile                #查看文件的时间属性  
#修改后文件的时间属性为当前系统时间  
-rw-r--r-- 1 hdd hdd 55 2011-08-22 19:53 testfile  

使用指令"touch"时，如果指定的文件不存在，则将创建一个新的空白文件。例如，在当前目录下，使用该指令创建一个空白文件"file"，输入如下命令：

$ touch file            #创建一个名为“file”的新的空白文件 



《《chmod》》
 三位八进制数分别表示:
`700`u	user rwx
`070`g	group rwx
`007`o	other rwx

 每位八进制数转化为三位二进制数:
`100`r
`010`w
`110`x


chmod [-cfvR] [--help] [--version] mode file...

参数说明

mode : 权限设定字串，格式如下 :

[ugoa...][[+-=][rwxX]...][,...]

其中：

    u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。
    + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。
    r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。

其他参数说明：

    -c : 若该文件权限确实已经更改，才显示其更改动作
    -f : 若该文件权限无法被更改也不要显示错误讯息
    -v : 显示权限变更的详细资料
    -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)
    --help : 显示辅助说明
    --version : 显示版本

符号模式

使用符号模式可以设置多个项目：who（用户类型），operator（操作符）和 permission（权限），每个项目的设置可以用逗号隔开。 命令 chmod 将修改 who 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 who 的位置来说明，如 who 的符号模式表所示:
who 	用户类型 	说明
u 	user 	文件所有者
g 	group 	文件所有者所在组
o 	others 	所有其他用户
a 	all 	所用用户, 相当于 ugo

operator 的符号模式表:
Operator 	说明
+ 	为指定的用户类型增加权限
- 	去除指定用户类型的权限
= 	设置指定用户权限的设置，即将用户类型的所有权限重新设置

permission 的符号模式表:
模式 	名字 	说明
r 	读 	设置为可读权限
w 	写 	设置为可写权限
x 	执行权限 	设置为可执行权限
X 	特殊执行权限 	只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行
s 	setuid/gid 	当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限
t 	粘贴位 	设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位
八进制语法

chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其它用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。
# 	权限 	rwx 	二进制
7 	读 + 写 + 执行 	rwx 	111
6 	读 + 写 	rw- 	110
5 	读 + 执行 	r-x 	101
4 	只读 	r-- 	100
3 	写 + 执行 	-wx 	011
2 	只写 	-w- 	010
1 	只执行 	--x 	001
0 	无 	--- 	000

例如， 765 将这样解释：

    所有者的权限用数字表达：属主的那三个权限位的数字加起来的总和。如 rwx ，也就是 4+2+1 ，应该是 7。
    用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如 rw- ，也就是 4+2+0 ，应该是 6。
    其它用户的权限数字表达：其它用户权限位的数字相加的总和。如 r-x ，也就是 4+0+1 ，应该是 5。

实例

将文件 file1.txt 设为所有人皆可读取 :

chmod ugo+r file1.txt

将文件 file1.txt 设为所有人皆可读取 :

chmod a+r file1.txt

将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :

chmod ug+w,o-w file1.txt file2.txt

将 ex1.py 设定为只有该文件拥有者可以执行 :

chmod u+x ex1.py

将目前目录下的所有文件与子目录皆设为任何人可读取 :

chmod -R a+r *

此外chmod也可以用数字来表示权限如 :

chmod 777 file

语法为：

chmod abc file

其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。
r=4，w=2，x=1

    若要 rwx 属性则 4+2+1=7；
    若要 rw- 属性则 4+2=6；
    若要 r-x 属性则 4+1=5。

chmod a=rwx file

和

chmod 777 file

效果相同

chmod ug=rwx,o=x file

和

chmod 771 file

效果相同

若用 chmod 4755 filename 可使此程序具有 root 的权限。
更多说明
命令 	说明
chmod a+r file 	给file的所有用户增加读权限
chmod a-x file 	删除file的所有用户的执行权限
chmod a+rw file 	给file的所有用户增加读写权限
chmod +rwx file 	给file的所有用户增加读写执行权限
chmod u=rw,go= file 	对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）
chmod -R u+r,go-r docs 	对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限
chmod 664 file 	对file的所有者和用户组设置读写权限, 为其其他用户设置读权限
chmod 0755 file 	相当于u=rwx (4+2+1),go=rx (4+1 & 4+1)。0 没有特殊模式。
chmod 4755 file 	4设置了设置用户ID位，剩下的相当于 u=rwx (4+2+1),go=rx (4+1 & 4+1)。
find path/ -type d -exec chmod a-x {} \; 	删除可执行权限对path/以及其所有的目录（不包括文件）的所有用户，使用'-type f'匹配文件
find path/ -type d -exec chmod a+x {} \; 	允许所有用户浏览或通过目录path/ 