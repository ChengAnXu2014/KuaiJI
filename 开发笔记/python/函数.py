参数；匿名函数；return语句；变量作用域
-------------------------
《《函数定义语法》》
-----------------------

# 函数的定义必须在调用之前.
#函数用 def 关键字定义.
def my_function():
    """
    此处可以加上一段函数描述字符串;
    单引号字符串、双引号字符串、
    三引号字符串都可以用.
    :return:
    """
    print("My first function!")


# 函数和类的结尾，要用两个空行结束.
my_function()

================================================



================================================
《《参数》》
----------------------
以下是调用函数时可使用的正式参数类型
---------------
必备参数
关键字参数
默认参数
不定长参数
===============================================================================
《《必备参数》》
-------------

# 所谓必备参数，就是一般意义上的普通参数。
def canShu(arg1, arg2, arg3):
    print("arg1", arg1)
    print("arg2", arg2)
    print("arg3", arg3)


  # 必备参数根据相对位置传递参数; 调用时，将实参传递给声明时与其在相同位置的形参.
canShu(11, "aa", 33)

===============================================================================
《《关键字参数》》
--------------

# 关键字参数的声明方式与必备参数一样。
def canShu(arg1, arg2, arg3):
    print("arg1", arg1)
    print("arg2", arg2)
    print("arg3", arg3)


'''
关键字参数在调用时，用类似变量赋值(传递参数)的方式显性将实参传递给对应的形参。
关键字参数并不依赖相对位置来传递参数，因此其调用时的位置可以与声明时不同。
'''
canShu(arg3=33, arg2="ee", arg1=11)


===============================================================================
《《默认参数》》
-------------

# arg2为默认参数。默认参数在声明时就被赋予了初始值。
def canShu(arg1, arg2=99):
    print(arg1, arg2)


# 如果调用时，默认参数被重新赋值(传递参数),则新值会覆盖初始值。
canShu(33, 66)

# 如果调用时，默认参数没有被重新赋值(传递参数),则会采用初始值。
canShu(33)

===============================================================================
《《不定长参数》》
------------

# arg2为不定长参数。不定长参数声明时前面加一个"*"。
def canShu(arg1, *arg2,arg3):
    print("arg1", arg1)
    print("arg2", arg2)
    print("arg3",arg3)


# 不定长参数的实质是一个元组。
canShu(99, "ff")

# 所有传递给不定长参数的实参，都会成为元组的成员。
canShu(11, "aa", 22, "bb")

# 元组成员是按传递的先后顺序排列的。
canShu(11, "aa", 22, "bb", 33, "cc")
canShu(11, "aa", 22, "bb", 33, "cc", 44, "dd")
canShu(11, "aa", 22, "bb", 33, "cc", 44, "dd", 55, "ee")

===============================================================================



===============================================================================
《《混参》》
--------------------
不同类型参数的混用规则
-------------------------------------------
调用时显性赋值(传递参数)的默认参数，为带有初始值的，特殊的关键字参数
调用时隐性赋值(传递参数)的默认参数，为带有初始值的，特殊的必备参数
严格来说，只有调用时不赋值(传递参数)，采用初始值的默认参数，才是独立的一种参数
===============================================================================
声明时，隐性赋值(传递参数)的默认参数后不能跟必备参数
===============================================================================
无论声明还是调用时，关键字参数与显性赋值(传递参数)的默认参数后都不能跟其它参数(必备参数、不定长参数以及隐性赋值(传递参数)的默认参数)
调用时，关键字参数与显性赋值(传递参数)的默认参数之间、关键字参数之间、显性赋值(传递参数)的默认参数之间，可以互换位置
===============================================================================
一个函数的参数列表中只能有一个不定长参数
不定长参数后不能跟必备参数
不定长参数后跟隐性赋值(传递参数)的默认参数时，默认参数总是采用初始值。因为不定长参数会把其后所有非显性赋值(传递)的实参都收入囊中
===============================================================================



===============================================================================
《《匿名函数》》
------------------------
python 使用lambda关键字来创建匿名函数。

lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
语法
lambda函数的语法只包含一个语句，如下
lambda [arg1 [,arg2,.....argn]]:expression
-----------------------------

niMing1 = lambda: print("niMing1")
niMing2 = lambda arg1, arg2, arg3: print("niMing2", arg1, arg2, arg3)
niMing3 = lambda arg1, arg2: arg1 * arg2

niMing1()
niMing2(11, 22, 33)
print("niMing3", niMing3(10, 20))

===============================================================================



===============================================================================
《《return语句》》
return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做
实例(Python 2.0+)

# 可写函数说明
def sum( arg1, arg2 ):
   # 返回2个参数的和."
   total = arg1 + arg2
   print "函数内  ", total
   return total

# 调用sum函数
total = sum( 10, 20 )
以上实例输出结果
函数内   30

===============================================================================



===============================================================================
《《变量作用域》》
一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。
变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下

《《全局变量》》
《《局部变量》》

全局变量和局部变量
定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例
实例(Python 2.0+)

total = 0 # 这是一个全局变量
# 可写函数说明
def sum( arg1, arg2 ):
   #返回2个参数的和."
   total = arg1 + arg2 # total在这里是局部变量.
   print "函数内是局部变量  ", total
   return total

#调用sum函数
sum( 10, 20 )
print "函数外是全局变量  ", total
以上实例输出结果
函数内是局部变量   30
函数外是全局变量   0

===============================================================================



===============================================================================