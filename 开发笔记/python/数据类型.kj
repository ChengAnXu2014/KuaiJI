《《数字》》
数字数据类型用于存储数值
他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象
当你指定一个值时，Number对象就会被创建
var1 = 1
var2 = 10
您也可以使用del语句删除一些对象的引用
del语句的语法是
del var1[,var2[,var3[....,varN]]]]
您可以通过使用del语句删除单个或多个对象的引用例如

vr1, vr2, vr3 = 11, 22, 33
print(vr1, vr2, vr3)
del vr1, vr2, vr3  # 删除变量
print(vr1, vr2, vr3)  # 变量已删除，报错

Python支持四种不同的数字类型
int（有符号整型）
long（长整型[也可以代表八进制和十六进制]）
float（浮点型）
complex（复数）


《《数字实例》》
int_____________long____________________________float_______________complex

10______________51924361L_______________________0.0_________________3.14j

100_____________-0x19323L_______________________15.20_______________45.j

-786____________0122L___________________________-21.9_______________9.322e-36j

080_____________0xDEFABCECBDAECBFBAEl___________32.3e+18____________.876j

-0490___________535633629843L___________________-90.________________-.6545+0J

-0x260__________-052318172735L__________________-32.54e100__________3e+26J

0x69____________-4721885298529L_________________70.2E-12____________4.53e-7j





《《字符串》》
《《字符串截取》》
如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串
其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾
[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符
截取字符串的参数，除了头、尾下标外，还可以有第三个参数：步长

s = "0123456789jihgfedcba"
print("[3]:" + s[3])
print("[-3]:" + s[-3])
print("[2:6]:" + s[2:6])
print("[-17:-12]:" + s[-17:-12])
print("[5:]:" + s[5:])
print("[:5]:" + s[:5])
print("[0:17:2]" + s[0:17:2])
print("[0:17:3]" + s[0:17:3])
print("[0:17:4]" + s[0:17:4])


《《字符串连接》》
str1 = "hello"

# 和大多数脚本语言一样，Python中字符串用加号连接
str2 = str1 + " world" + "!!!"
# 不同的是，Python中不能直接将字符串与数字连接
# 而在其它脚本语言中，字符串与数字连接时，会自动将数字转化为字符串
str3=str2+99 #  此处会报错
print(str2)





《《列表》》
《《列表截取》》
列表(list)是 python 最通用的复合数据类型,它可以包含字符、数字、字符串甚至列表和字典（即嵌套）
列表用 [ ] 标识，内部元素用逗号分隔

如果你要实现从列表中获取一段子列表的话，可以使用 [头下标:尾下标] 来截取相应的列表
其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾
[头下标:尾下标] 获取的子列表包含头下标的字符，但不包含尾下标的字符
截取列表的参数，除了头、尾下标外，还可以有第三个参数：步长

L = [
    0,
    "str1",
    0.2,
    "str3",
    ["list", 4],
    "str5",
    ["list", 6],
    "str7",
    8,
    9
]
print("[3]:", L[3])
print("[-3]:", L[-3])
print("[2:5]:", L[2:5])
print("[-7:-4]:", L[-7:-4])
print("[:5]:", L[:5])
print("[5:]:", L[5:])
print("[0:9:2]:", L[0:9:2])
print("[0:9:3]:", L[0:9:3])





《《元组》》
《《元组截取》》
元组(tuple)类似于 List（列表），但是不能重新赋值，相当于只读列表
元组用 () 标识，内部元素用逗号分隔

如果你要实现从元组中获取一段子元组的话，可以使用 [头下标:尾下标] 来截取相应的元组
其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾
[头下标:尾下标] 获取的子元组包含头下标的字符，但不包含尾下标的字符
截取元组的参数，除了头、尾下标外，还可以有第三个参数：步长

t = (0, "str1", 2, 0.3, "str4", ["list5", 5], ("tuple6", 6), 7, 8, 9, 10)
print("[3]:", t[3])
print("[-3]:", t[-3])
print("[2:5]:", t[2:5])
print("[-6:-3]:", t[-6:-3])
print("[:5]:", t[:5])
print("[5:]", t[5:])
print("[0:9:2]:", t[0:5:2])
print("[0:9:3]:", t[0:9:3])


t = (1, 2, 3, 4, 5)
print(t[3])
t[3] = 9999#非法操作，会报错
print(t[3])





《《字典》》
字典(dict)是无序的对象集合，字典不是用下标，而是用键(key)来访问元素
字典所包含的元素为键值对,由键(key)和它对应的值(value)组成
字典的键值可以是字符、数字、字符串甚至列表和字典（即嵌套）
字典用"{ }"标识,内部元素由逗号分隔



d = {
    "name": "Aoi Sola",
    "age": 23,
    "job": "AV"
}
print(d["name"], d["age"], d["job"])





《《数据类型转换》》
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可
以下几个内置的函数可以执行数据类型之间的转换这些函数返回一个新的对象，表示转换的值
函数
描述
int(x [,base])
将x转换为一个整数
long(x [,base] )
将x转换为一个长整数
float(x)
将x转换到一个浮点数
complex(real [,imag])
创建一个复数
str(x)
将对象 x 转换为字符串
repr(x)
将对象 x 转换为表达式字符串
eval(str)
用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s)
将序列 s 转换为一个元组
list(s)
将序列 s 转换为一个列表
set(s)
转换为可变集合
dict(d)
创建一个字典d 必须是一个序列 (key,value)元组
frozenset(s)
转换为不可变集合
chr(x)
将一个整数转换为一个字符
unichr(x)
将一个整数转换为Unicode字符
ord(x)
将一个字符转换为它的整数值
hex(x)
将一个整数转换为一个十六进制字符串
oct(x)
将一个整数转换为一个八进制字符串