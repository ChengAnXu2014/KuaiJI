Git Integration(集成)

Sublime Text's Git integration(集成) includes the following components(组件):

Side Bar
Status(状态) Bar
Diff(差异) Markers(标记)
Sublime Merge(合并) Integration(集成)
Settings

Please note: the following documentation discusses(讨论) the implementation(执行(工具)) of the Git integration(集成) as seen with the Default and Adaptive(自适应的) themes(主题) that are included with Sublime Text. Via(通过) the theme(主题) engine(引擎), it is possible for third-party themes(主题) to change the visual(视觉的) presentation(演示) of information(信息), in which case the following documentation may not be accurate(精确的).



Side Bar
Files and folders displayed in the side bar will include a status(状态) badge(徽章) along(随着) the right-hand edge(边缘), when modified(修改). This includes files and folder in the Folders section of the side bar, along(随着) with files in the Open Files section. Ignored(忽略) files and folders are de-emphasized(去强调) in the side bar by reducing(减少) the opacity(不透明度) of the name.

When the mouse pauses(暂停) over a status(状态) badge(徽章), a tool(工具) tip(提示) will be displayed indicating(指示) the status(状态) of the file, or in the case of a folder, the status(状态) of the contained(包含) files and folders.



Status(状态) Badge(徽章) Key
The following table indicates(指示) the meaning of each badge(徽章). Please note that the color of the badges(徽章) will be slightly(稍微地) different as they adapt(适应) to the closest(最近的) hue(色调) in the active color scheme(方案).

Untracked(未追踪)
 Modified(修改)
 Missing(失踪)
 Staged(分阶段) Addition(增加)
 Staged(分阶段) Modification(修改)
 Staged(分阶段) Deletion(删除)
Unmerged(未合并)

When a folder contains files with multiple(多个) statuses(状态), the badge(徽章) most toward(朝向) the end of the above(上面的) list will override(覆盖) all others.



Status(状态) Bar
When the focussed(焦点) file us containing within the working directory(目录) of a Git repository(仓库), the status(状态) bar will contain(包含) the name of the current branch(分支), along(随着) with the number of files that are untracked(未追踪), modified(修改), staged(分阶段) or unmerged(未合并). The status(状态) bar element(元素) will look like:



Diff(差异) Markers(标记)
Sublime Text's incremental(递增的) diff(差异) functionality(功能) ties(捆绑) in with the Git integration(集成). By default, the incremental(递增的) diff(差异) functionality(功能) tracks(追踪) changes to the file since(自从) it was last saved, but it is also possible to diff(差异) against HEAD.
Here is an example(例子) of what the diff(差异) markers(标记) look like in action, using the Mariana(马里亚纳) color scheme(方案):


Changing the setting git_diff_target(目标) to "head" will modify(修改) the diff(差异) markers(标记) to display a diff(差异) versus(相较于) the version of the file at the Git repository(仓库) HEAD, as opposed(反对) to the version of the file in the working directory(目录).

See the incremental(递增的) diff(差异) documentation for more information(信息) and examples, including instructions(说明书) for viewing(查看) inline(行内) diffs(差异), navigating(导航) between(在...之间) hunks(猛男) and reverting(恢复) changes.



Sublime Merge(合并) Integration(集成)
The Git features(特色) available(可获得的) in Sublime Text were derived(衍生) from work that went into our other product(产品), Sublime Merge(合并). Sublime Merge(合并) is a full-featured(极具特色的), blazing(充满激情的)-fast Git client(客户,客户端) built upon(在上面) the technologies(技术) from Sublime Text.

Since(自从) editing source code and prose(散文) requires(需要) different tools and workflows(工作流程) than managing(管理) a Git repository(仓库), we opted(选择) to integrate(整合) the most appropriate(适当的) Git functionality(功能) into Sublime Text, but leave more advanced(高级) features(特色) in Sublime Merge(合并). The following integration(集成) points make it easy to jump(跳转) into the appropriate(适当的) Git context(上下文):

Editor(编辑器) Context(上下文) Menu(菜单)
Open Git Repository(仓库)…
File History…
Line History…
Blame(责备) File…

Side Bar Folder Context(上下文) Menu(菜单)
Open Git Repository(仓库)…
Folder History…

Side Bar File Context(上下文) Menu(菜单)
Open Git Repository(仓库)…
File History…
Folder History…
Blame(责备) File…

(Command Palette控制台)
Sublime Merge(合并): Open Repository(仓库)
Sublime Merge(合并): Folder History
Sublime Merge(合并): File History
Sublime Merge(合并): Blame(责备) File



Settings
The Git integration(集成) may be controlled(控制) via(通过) the show_git_status setting. The default value of true enables(启用) Git integration(集成), while false disables(禁用) it.
The behavior(动作) of incremental(递增的) diff(差异) for files in a Git repository(仓库) can be controlled(控制) via(通过) the git_diff_target(目标) setting. Valid(有效的) values include:
"index(下标,索引)" – diff(差异) against the Git index(下标,索引), the default
"head" – diff(差异) against the file at HEAD
