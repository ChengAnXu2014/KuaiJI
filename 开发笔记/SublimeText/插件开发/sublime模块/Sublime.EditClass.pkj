《《sublime.edit类》》

edit对象没有方法,是为了对修改 buffer 内容的操作进行分组,以便undo和redo可以进行而存在的.
edit不可以手动创建,只能通过view.begin_edit()来创建.
每一个view.begin_edit()创建了edit对象后,都要在操作完成后用view.end_edit()关闭该edit对象.
在view.begin_edit()和view.end_edit()之间的修改 buffer 内容的操作会被分为用于undo和redo的一组.

《《view类中的相关方法》》

《《view.insert()》》

原型:insert(edit,point,string)

参数:
edit:edit类的实例,即edit对象.textcommand类的run(self,edit)方法的edit参数,即为当前view:self.view所关联的edit对象.
point:int 类型;字符偏移地址.
string:str 类型字符串.

返回:int 类型.

描述:在调用view中point指定位置插入string.

import sublime
import sublime_plugin


class examplecommand(sublime_plugin.textcommand):
	def run(self, edit):

		# 在文本开头插入"老狗受死！！！"
		self.view.insert(edit,0,"老狗受死！！！")

		# 在caret处插入"老狗受死！！！"
		self.view.insert(edit,self.view.sel()[0].b,"老狗受死！！！")


《《view.erase()》》

原型:erase(edit,region)

参数:
edit:sublime.edit类的实例,即edit对象.
region:sublime.region类的实例,即region对象.

描述:删除 buffer 中region对象代表区域的内容.

import sublime
import sublime_plugin


class myexamplecommand(sublime_plugin.textcommand):
	def run(self, edit):
		rg=sublime.region(3,9)
		self.view.erase(edit,rg)


《《view.replace()》》

原型:replace(edit,region,string)

参数:
edit:view.edit类的实例,即edit对象.
region:view.region类的实例,即region对象.
string:str 类型字符串.

描述:用string替换 buffer 中region对象代表区域的内容.

import sublime
import sublime_plugin


class myexamplecommand(sublime_plugin.textcommand):
	def run(self, edit):
		rg=sublime.region(0,5)
		self.view.replace(edit,rg,"替换字符串")




《《edit分组》》

使用同一edit对象作为edit参数的修改 buffer 内容的方法,会被分入同一undo/redo组.
下面这段代码中,用erase()和replace()方法,分别对 buffer 中不同位置的三段region进行了删除和替换;
但是由于它们用的都是同一个edit对象作为edit参数,所以只要一次undo或redo操作就可以影响所有改变.

import sublime
import sublime_plugin


class myexamplecommand(sublime_plugin.textcommand):
	def run(self, edit):
		rg=sublime.region(0,5)
		self.view.erase(edit,rg)
		self.view.replace(edit,rg,"替换字符串1")

		rg=sublime.region(10,15)
		self.view.erase(edit,rg)
		self.view.replace(edit,rg,"替换字符串2")

		rg=sublime.region(20,25)
		self.view.erase(edit,rg)
		self.view.replace(edit,rg,"替换字符串3")