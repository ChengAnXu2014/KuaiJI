《《id()》》
参数:无

返回值:id:int 类型数字.

描述:返回view的id.

《《buffer_id()》》
参数:无

返回值:id:int 类型数字.

描述:返回view所属 buffer 的id.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		vr=self.view.id()
		print("\n\n",vr)

		vr=self.view.buffer_id()
		print("\n",vr)


《《is_primary()》》
参数:无

返回值:bool

描述:判断view是否为相关文件的主view;是则返回 True,否则返回 False



《《file_name()》》
参数:无

返回值:full_path:str 类型;包含目录的完整文件名.

描述:返回view所关联的文件的完整文件名.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		vr=self.view.file_name()
		print("\n\n",vr)






《《set_name(string)》》
参数:string:str 类型;buffer 名称.

描述:将view所关联 buffer 的名称(缺省没有)设为string.

《《name()》》
参数:无

返回值:string:str 类型;buffer 名称.

描述:返回view所关联 buffer 的名称.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		self.view.set_name("buzz_lightyer")
		vr=self.view.name()
		print("\n\n",vr)






《《is_loading()》》
参数:无

返回值:bool 值.

描述:
判断view所关联 buffer 是否还在从磁盘载入.
是则返回 true;否则返回 false.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		vr=self.view.is_loading()
		print("\n\nis_loading:",vr)


《《is_dirty()》》
参数:无

返回值:bool 值.

描述:
判断view所关联 buffer 是否有未保存内容;
是则返回 true;否则返回 false.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		vr=self.view.is_dirty()
		print("\n\nis_dirty:",vr)


《《set_read_only(flag)》》
参数:flag:bool 类型值;

描述:
配置view所关联 buffer 的只读属性;
flag为 true,设为只读;
flag为 false,设为可读写.

《《is_read_only()》》
参数:无

返回值:bool 值.

描述:
判断view所关联 buffer 的只读属性;
返回 true,为只读;
返回false,为可读写.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		print("\n\n默认情况下:")
		vr=self.view.is_read_only()
		print("is_read_only:",vr)

		print("\nset_read_only为true:")
		self.view.set_read_only(true)
		vr=self.view.is_read_only()
		print("is_read_only:",vr)

		print("\nset_read_only为false:")
		self.view.set_read_only(false)
		vr=self.view.is_read_only()
		print("is_read_only:",vr)




《《set_scratch(flag)》》
参数:flag:bool:
为 True 设置view的buffer为临时缓冲区
为 False 设置view的buffer为普通缓冲区

返回值:无

描述:配置view所关联 buffer 的临时属性



《《is_scratch()》》
参数:无

返回值:bool:
为 True 表示view的 buffer 为临时缓冲区
为 False 表示view的 buffer 不是临时缓冲区

描述:判断view所关联 buffer 是否为临时缓冲区

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		print("\n\n默认情况下:")
		vr=self.view.is_scratch()
		print("is_scratch:",vr)

		print("\nset_scratch为true:")
		self.view.set_scratch(true)
		vr=self.view.is_scratch()
		print("is_scratch:",vr)

		print("\nset_scratch为false:")
		self.view.set_scratch(false)
		vr=self.view.is_scratch()
		print("is_scratch:",vr)






《《window()》》
参数:无

返回值:window:window类的实例,即window对象.

描述:返回view所属的window对象.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		print("\n\n",self.view.window())






《《size()》》
参数:无

返回值:int 值.

描述:返回view所关联 buffer 中字符总数.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		print("\n\n",self.view.size())


《《rowcol(point)》》
参数:
point:int 类型,文本偏移地址

返回值:rowcol:(row,col)tuple 格式的元组.

描述:把point转化为rowcol.

import sublime
import sublime_plugin

class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		rowcol=self.view.rowcol(15)
		print("\n\nrowcol:",rowcol)
		print("rowcol[0]:",rowcol[0])
		print("rowcol[1]:",rowcol[1])


《《text_point(row, col)》》
参数:
row:int 类型;行坐标;
col:int 类型;列坐标.

返回值:point:int 类型;字符偏移地址.

描述:把row和col类型的字符坐标转化为point类型的字符坐标.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 返回从0坐标(文本开头)到第三行第五列的字符偏移地址.
		# 行和列都是从0开始计数.
		vr=self.view.text_point(3,5)
		print(vr)






《《viewport_extent()》》
参数:无

返回值:
vector:(dip1,dip2)格式的元组.
dip1:viewport区域的宽度.
dip2:viewport区域的高度.

描述:返回view的viewport区域的宽和高.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 返回视窗的宽和高.
		vr=self.view.viewport_extent()
		print(vr)


《《layout_extent()》》
参数:无

返回值:
vector:(dip1,dip2)格式的元组.
dip1:layout区域的宽度;
dip2:layout区域的高度.

描述:返回view的layout区域的宽和高.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		# 返回已编辑(有字符)区域的宽高.宽由所有行中最长的一行决定.
		# 可用于调整视窗大小到刚好够显示所有内容.
		vr=self.view.layout_extent()
		print(vr)






《《line_height()》》
参数:无

返回值:dip:int 类型值.

描述:返回view的layout中以dip为单位的行高.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 返回layout的行高.
		vr=self.view.line_height()
		print(vr)


《《em_width()》》
参数:无

返回值:dip:int 类型值.

描述:返回view的layout中以dip为单位的字符宽度.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 返回layout的字符宽度.
		vr=self.view.em_width()
		print(vr)






《《sel()》》
参数:无

返回值:regionset(selection):regions_list.

描述:返回包含所有选中区域的 regions_list.

import sublime
import sublime_plugin

class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		region_list=self.view.sel()
		print("\n\nregion_list[0]",region_list[0])
		print("region_list[0].a:",region_list[0].a)
		print("region_list[0].b:",region_list[0].b)
		
		print("\nregion_list[1]",region_list[1])
		print("region_list[1].a:",region_list[1].a)
		print("region_list[1].b:",region_list[1].b)

		print("\nregion_list[2]",region_list[2])
		print("region_list[2].a:",region_list[2].a)
		print("region_list[2].b:",region_list[2].b)
		
		print("\nregion_list[3]",region_list[3])
		print("region_list[3].a:",region_list[3].a)
		print("region_list[3].b:",region_list[3].b)


《《line(point)》》
参数:
point:int 类型,文本偏移地址

返回值:region,point所在行的region,不包含结尾的换行符

描述:返回point所在行的region,不包含结尾的换行符


《《line(argRegion)》》
参数:argRegion

返回值:retRegion

描述:返回argRegion所跨越的所有行的文本,不包含换行符


《《full_line(point)》》
参数:point

返回值:region

描述:返回point所在行的region,包含结尾的换行符


《《full_line(argRegion)》》
参数:argRegion

返回值:retRegion

描述:返回argRegion所跨越的所有行的文本,包换行符


《《lines(argRegion)》》
参数:argRegion

返回值:regions_list

描述:返回argRegion所跨越的所有行的文本组成的列表,每一行都是一个单独的region


《《split_by_newlines(argRegion)》》
参数:argRegion

返回值:region_list

描述:以换行符为分隔符,把argRegion分割为多个regions,并返回包含这些regions的列表


《《insert(edit,point,string)》》
参数:
edit:edit类的实例,即edit对象.textcommand类的run(self,edit)方法的edit参数,即为当前view:self.view所关联的edit对象.
point:int 类型;字符偏移地址.
string:str 类型字符串.

返回值:int 类型.

描述:在view中point指定位置插入string.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 在文本开头插入"老狗受死！！！"
		self.view.insert(edit,0,"老狗受死！！！")

		# 在caret处插入"老狗受死！！！"
		self.view.insert(edit,self.view.sel()[0].b,"老狗受死！！！")


《《erase(edit,region)》》
参数:
edit:sublime.edit类的实例,即edit对象.
region:sublime.region类的实例,即region对象.

描述:删除 buffer 中region对象代表区域的内容.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
		def run(self, edit):
				rg=sublime.region(3,9)
				self.view.erase(edit,rg)


《《replace(edit,region,string)》》
参数:
edit:view.edit类的实例,即edit对象.
region:view.region类的实例,即region对象.
string:str 类型字符串.

描述:用string替换 buffer 中region对象代表区域的内容.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
		def run(self, edit):
				rg=sublime.region(0,5)
				self.view.replace(edit,rg,"替换字符串")


《《set_encoding(flag)》》
参数:
flag:str 类型;字符编码格式;
"utf-8" "utf-16" "ascii"等.

描述:配置view所关联文件的字符编码格式.
可通过菜单:file->save with encoding查看所有sublime支持的字符编码格式.

《《encoding()》》
参数:无

返回值:flag:str 类型;字符编码格式;
"utf-16" "utf-8" "ascii"等.

描述:返回view所关联文件的字符编码格式.
可通过菜单:file->save with encoding查看所有sublime支持的字符编码格式.

import sublime
import sublime_plugin


class ExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):

		# 设置字符编码.
		self.view.set_encoding("utf-16 le")

		# 返回字符编码.
		vr=self.view.encoding()
		print(vr)






《《set_line_endings(flag)》》
参数:
flag:str 类型;
"windows":windows系统下的换行符模式;
"unix":类unix系统下的换行符模式;
"未知":苹果系统下的换行符模式.

描述:配置view所关联文件的换行符模式,下次保存时生效.

《《line_endings()》》
参数:无

返回值:
flag:str 类型;
"windows":windows系统下的换行符模式;
"unix":类unix系统下的换行符模式;
"未知":苹果系统下的换行符模式.

描述:返回view所关联文件的换行符模式.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		print("\n\n默认情况下:")
		vr=self.view.line_endings()
		print("line_endings:",vr)

		print("\nset_line_endings为unix:")
		self.view.set_line_endings("unix")
		vr=self.view.line_endings()
		print("line_endings:",vr)

		print("\nset_line_endings为windows:")
		self.view.set_line_endings("windows")
		vr=self.view.line_endings()
		print("line_endings:",vr)






《《settings()》》
参数:无

返回值:settings对象;
即sublime.settings类的实例.

描述:返回与view相关的settings对象.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
		def run(self, edit):
				vr=self.view.settings()
				print("\n\nsettings:",vr)






《《run_command(command_name,<args>)》》
参数:
command_name:str 类型;textcommand命令名;
args:可选;str 类型;要传递给命令的参数.

描述:用[args]参数(如果有的话)运行名为command_name的命令.
通过菜单:preferences->key bindings可打开快捷键配置文件.
其中有很多当前可用的命令,有textcommand、windowcommand和applicationcommand.
偏文本编辑类的都是textcommand,可以多试几个看看.

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
		def run(self, edit):
				self.view.run_command("select_all")






《《substr(point)》》
参数:
point:int 类型;字符偏移地址

返回值:string:str 类型字符串.

描述:返回point右侧的字符.

ps:python中没有 char 类型,只有 str 类型;
在python中单个字符也是只有一个字符的字符串;也有结束符"\0".

import sublime
import sublime_plugin


class MyExampleCommand(sublime_plugin.TextCommand):
		def run(self, edit):
				# 定义sublime.region类的实例rg.
				# 初始化:rg.a=3;rg.b=9.
				rg=sublime.region(3,9)
				vr=self.view.substr(rg)
				print("\n\nrg.a=3;rg.b=9;substr(rg):",vr)

				vr=self.view.substr(3)
				print("\nsubstr(3):",vr)
				vr=self.view.substr(9)
				print("substr(9):",vr)




《《substr(region)》》
参数:
region:sublime.region类的实例,即region对象
region对象包含两个point类型的属性:a和b:
region.a:起始字符偏移地址
region.b:结束字符偏移地址
字符偏移地址由0开始计算
region代表了view中的由region.a开始(包含a),至region.b结束(不包含b)的一段线性区域

返回值:string:str 类型字符串.

描述:返回region区域包含的字符串



《《word(point)》》
参数:proint

返回值:region

描述:返回point所在单词


《《word(argRegion)》》
参数:argRegion

返回值:retRegion

描述:返回argRegion所跨越的所有单词的文本,不包含换行符


《《classify(point)》》
参数:point

返回值:int

描述:对point指定位置进行分类,返回值是0或以下flags的按位组合:
sublime.CLASS_WORD_START:point在单词的开头
sublime.CLASS_WORD_END:point在单词的结尾
sublime.CLASS_PUNCTUATION_START:point在单词的标点符号的前面
sublime.CLASS_PUNCTUATION_END:point在单词的标点符号的后面
sublime.CLASS_SUB_WORD_START:point在subWord的开头
sublime.CLASS_SUB_WORD_END:point在subWord的结尾
sublime.CLASS_LINE_START:point在行开头
sublime.CLASS_LINE_END:point在行结尾
sublime.CLASS_EMPTY_LINE:point在空行中



《《find_by_class(point, forward, classes, <separators>)》》
参数:
point:
forward:
classes:
separators:

返回值:region

描述:
Finds the next location after point that matches the given classes. If forward is False, searches backwards instead of forwards. classes is a bitwise OR of the sublime.CLASS_XXX flags. separators may be passed in, to define what characters should be considered to separate words. 



《《expand_by_class(point, classes, <separators>)》》
参数:
point:
classes:
separators:

返回值:region

描述:
Expands point to the left and right, until each side lands on a location that matches classes. classes is a bitwise OR of the sublime.CLASS_XXX flags. separators may be passed in, to define what characters should be considered to separate words. 



《《expand_by_class(region, classes, <separators>)》》
参数:
region:
classes:
separators:

返回值:region

描述:
Expands region to the left and right, until each side lands on a location that matches classes. classes is a bitwise OR of the sublime.CLASS_XXX flags. separators may be passed in, to define what characters should be considered to separate words. 



《《find(pattern, start_point, <flags>)》》
参数:
pattern:str 类型,匹配模板,普通字符串或正则表达式
start_point:point　类型,搜索开始的坐标
flags:可选,0或以下数值的按位组合:
sublime.LITERAL:不启用正则表达,所有字符都取其字面意义
sublime.IGNORECASE:忽略大小写

返回值:region

描述:用pattern模板从view的point位置开始搜索,并返回最先匹配到的字符串



《《find_all(pattern, <flags>, <format>, <extractions>)》》
参数:
pattern
flags:可选,
format:可选,
extractions:可选,

返回值:regions_list

描述:用pattern模板搜索view全部内容,返回所有匹配到的字符串(不重叠),每一个匹配到的字符串都是一个region



《《set_syntax_file(syntax_file)》》
参数:syntax_file

返回值:None

描述:改变当前view使用的syntax文件
Changes the syntax used by the view. syntax_file should be a name along the lines of Packages/Python/Python.tmLanguage. To retrieve the current syntax, use view.settings().get('syntax'). 



《《extract_scope(point)》》
参数:point

返回值:region

描述:返回与point点的字符同scope的范围
Returns the extent of the syntax scope name assigned to the character at the given point. 



《《scope_name(point)》》
参数:point

返回值:str

描述:返回point点的字符的scope
Returns the syntax scope name assigned to the character at the given point. 



《《match_selector(point, selector)》》
参数:
point
selector


返回值:bool

描述:判断selector是否与point点的字符的scope匹配
Checks the selector against the scope at the given point, returning a bool if they match. 




《《score_selector(point, selector)》》
参数:
point
selector

返回值:int

描述:判断selector与point点的字符的scope的匹配程度,返回值为0说明不匹配,返回值大于0说明匹配,值越大说明匹配得越好
Matches the selector against the scope at the given point, returning a score. A score of 0 means no match, above 0 means a match. Different selectors may be compared against the same scope: a higher score means the selector is a better match for the scope. 



《《find_by_selector(selector)》》
参数:selector

返回值:regions_list

描述:返回所有scope与selector匹配的regions组成的list
Finds all regions in the file matching the given selector, returning them as a list. 



《《show(location, <show_surrounds>)》》
参数:
location:point 、 region 或 selection:regions_list
show_surrounds:bool
为 True 则与show_at_center(location)一样，滚动后使location在viewport中央
为 False 则只要location在viewport内就行
默认为 True
ps:本方法的show_surrounds参数与下面的show_at_center(location)方法一定有一个是旧版本残留

返回值:None

描述:滚动viewport至location处
Scroll the view to show the given location, which may be a point, Region or Selection. 



《《show_at_center(location)》》
参数:
location:point 或 region

返回值:None

描述:滚动viewport至location处,使location在viewPort中央
Scroll the view to center on the location, which may be a point or Region. 



《《visible_region()》》
参数:无

返回值:region

描述:返回view中当前可见部分的region
Returns the currently visible area of the view. 



《《viewport_position()》》
参数:无

返回值:
vector:(dip1,dip2)格式的 tuple:
dip1:dip类型;x坐标值
dip2:dip类型;y坐标值
以设备独立像素为单位

描述:返回viewport相对于view0坐标的偏移坐标
Returns the offset of the viewport in layout coordinates. 



《《set_viewport_position(vector, <animate>)》》
参数:
vector:(dip1,dip2)格式的 tuple:
dip1:dip类型;x坐标值
dip2:dip类型;y坐标值
以设备独立像素为单位
animate:可选,

返回值:None

描述:滚动viewport至vector指定坐标
Scrolls the viewport to the given layout position. 



《《text_to_layout(point)》》
参数:point

返回值:vector

描述:把一个point转换为layout position
Converts a text point to a layout position 



《《text_to_window(point)》》
参数:point

返回值:vector

描述:把一个point转换为window position
Converts a text point to a window position 



《《layout_to_text(vector)》》
参数:vector

返回值:point

描述:把一个layout position转换为point
Converts a layout position to a text point 



《《layout_to_window(lay_vector)》》
参数:lay_vector

返回值:win_vector

描述:把一个layout position转换为window position
Converts a layout position to a window position 



《《window_to_layout(win_vector)》》
参数:win_vector

返回值:lay_vector

描述:把一个window position转换为layout position
Converts a window position to a layout position 



《《window_to_text(win_vector)》》
参数:win_vector

返回值:point

描述:把一个window position转换为point
Converts a window position to a text point 



《《add_regions(regions_key, regions_list, <scope>, <icon>, <flags>)》》
参数:
 regions_key:str,与被添加的regions绑定的key,便于其它方法或函数访问它们
 regions_list:要添加的regions的列表
 scope:分配给regions的scope

 icon:
可选,在region行的gutter显示的图标,有效值为:
 dot:点状图标
 circle:圆圈图标
 bookmark:书签图标
 自定义图标:相对于Packages文件夹的文件目录,如:Packages/Theme - Default/dot.png

 flags:
可选,0或以下数值的按位组合:
 sublime.DRAW_EMPTY: 用一条竖线表示空region(region.a=region.b),默认情况下空region不显示
 sublime.DRAW_EMPTY_AS_OVERWRITE: 用一条横线表示空region
 sublime.HIDE_ON_MINIMAP: 在缩略图上隐藏regions
 sublime.DRAW_NO_FILL: 不显示regions的填充色
 sublime.DRAW_NO_OUTLINE: 不显示regions的边框
 sublime.DRAW_SOLID_UNDERLINE: 在regions下面显示一条实线
 sublime.DRAW_STIPPLED_UNDERLINE: 在regions下面显示一条虚线
 sublime.DRAW_SQUIGGLY_UNDERLINE: 在regions下面显示一条波浪线
 sublime.PERSISTENT: 将regions存入session. 
 sublime.HIDDEN: 不显示regions

返回值:None

描述:在view中添加一组regions
icon names:dot, circle and bookmark 或相对于Packages文件夹的文件目录,如:Packages/Theme - Default/dot.png
Add a set of regions to the view. If a set of regions already exists with the given key, they will be overwritten. The scope is used to source a color to draw the regions in, it should be the name of a scope, such as "comment" or "string". If the scope is empty, the regions won't be drawn. 
The optional icon name, if given, will draw the named icons in the gutter next to each region. The icon will be tinted using the color associated with the scope. Valid . The icon name may also be a full package relative path, such as . 
The optional flags parameter is a bitwise combination of: 

The underline styles are exclusive, either zero or one of them should be given. If using an underline, sublime.DRAW_NO_FILL and sublime.DRAW_NO_OUTLINE should generally be passed in. 



《《get_regions(regions_key)》》
参数:regions_key,str,add_regions()方法的第一个参数

返回值:regions_list

描述:返回与regions_key相关的regions_list
Return the regions associated with the given key, if any 



《《erase_regions(regions_key)》》
参数:regions_key,str,add_regions()方法的第一个参数

返回值:None

描述:删除与regions_key相关的regions
Removed the named regions 



《《set_status(stat_key, stat_value)》》
参数:
stat_key:str
stat_value:str

返回值:None

描述:在状态栏添加一组键值对，值会显示在状态栏左侧，与其它键值对的值按字母顺序排列，用逗号分隔
Adds the status key to the view. The value will be displayed in the status bar, in a comma separated list of all status values, ordered by key. Setting the value to the empty string will clear the status. 



《《get_status(stat_key)》》
参数:stat_key,str,set_status()方法的第一个参数

返回值:str

描述:返回stat_key对应的值
Returns the previously assigned value associated with the key, if any. 



《《erase_status(stat_key)》》
参数:stat_key,str,set_status()方法的第一个参数

返回值:None

描述:删除stat_key对应的状态栏键值对
Clears the named status. 



《《command_history(hisCmd_index, <modifying_only>)?》》
参数:
hisCmd_index:redo,undo堆栈中命令的索引值:
0索引最近命令
负数索引undo命令
正数索引redo命令
modifying_only:bool:
为 True 时，只返回修改文本内容的命令
为 False 时，返回所有命令

返回值:(str, dict, int)tuple
成员:
str:hisCmd_name
dict:hisCmdArgs_dict
int:repeat_count

描述:返回redo, undo堆栈中,hisCmd_index指定的命令的命令名，参数字典和重复次数
hisCmd_index为0
Returns the command name, command arguments, and repeat count for the given history entry, as stored in the undo / redo stack. 
Index 0 corresponds to the most recent command, -1 the command before that, and so on. Positive values for index indicate to look in the redo stack for commands. If the undo / redo history doesn't extend far enough, then (None, None, 0) will be returned. 
Setting modifying_only to True (the default is False) will only return entries that modified the buffer. 



《《change_count()》》
参数:无

返回值:int

描述:返回当前文件修改次数,同一个buffer的不同view的change_count是相互独立的,只有保存操作会影响其它view
当前view的保存操作永远都只会给其它view增加一次change_count
无论当前view有多少步操作，保存动作都只会给其它view增加一次change_count
当前view没有对文本进行任何修改而执行保存操作，当前view自己的change_count不会增加;其它view的change_count还是会加一



《《fold(regions_list)》》
参数:resions_list

返回值:bool:
为 True 表示成功折叠了至少一个region
为 False 表示一个region都没有折叠成功:指定regions全部超出了view范围或早已被折叠

描述:折叠指定的regions



《《fold(region)》》
参数:region

返回值:bool:
为 True 表示成功折叠了region
为 False 表示折叠region失败:region超出了view范围或早已被折叠

描述:折叠指定的region



《《unfold(argRegion)》》
参数:argRegion

返回值:regions_list:被展开的regions的列表

描述:展开argRegion中包含的所有被折叠了的regions



《《unfold(argRegions_list)》》
参数:argRegions_list

返回值:retRegions_list:所有被展开的regions的列表

描述:展开argResions_list中包含的所有被折叠了的regions



《《overwrite_status()》》
参数:无

返回值:bool:
为 True 表示为覆写模式
为 False 表示为插入模式

描述:判断输入模式的插入与覆写，就是用键盘上的insert键切换的那两种模式



《《set_overwrite_status(enabled)》》
参数:enabled:bool:
为 True 时设为覆写模式
为 False 时设为插入模式

返回值:None

描述:设置输入的覆写和插入模式



《《symbols()?》》
参数:无
返回值:[(Region, str)]tuples_list
成员:
Region:symbol的region
str:symbol的字符串

描述:返回view的文本中定义的所有symbols
Extract all the symbols defined in the buffer. 



《《show_popup_menu(items, on_done, <unused_index>???)》》
参数:
items:strs_list:弹出菜单中显示的条目
on_done:回调函数:
on_done(index)
index为被选中的条目的序号,由0开始
如采用cancel方式退出菜单,则index为-1
unused_index:可选,int:
unuse序号为unused_index的条目???:


返回值:None

描述:在输入光标位置弹出一个弹出菜单
flags it currently unused. 



《《show_popup(content, <flags>, <location>, <max_width>, <max_height>, <on_navigate>, <on_hide>)》》
参数:
content:

flags:0或以下数值的按位组合:
sublime.COOPERATE_WITH_AUTO_COMPLETE:popup在auto complete menu旁边显示
sublime.HIDE_ON_MOUSE_MOVE:当鼠标移到，点击或(用滚轮)滚动时隐藏popup
sublime.HIDE_ON_MOUSE_MOVE_AWAY:Causes the popup to hide when the mouse is moved (unless towards the popup), or when clicked or scrolled 
location:
默认为-1，表示在输入光标位置显示popup
其它情况下为point，表示在point位置显示popup
max_width:
popup最大宽度，超过会显示滚动栏
max_height:
popup最大高度，超过会显示滚动栏
on_navigate:
回调函数，当链接被点击时被调用
原型为:on_navigate(href)
参数href为被点击的链接的href属性
on_hide:
回调函数，当popup被隐藏时被调用
原型为:on_hide()

返回值:None

描述:显示一个包含HTML内容的popup



《《update_popup(content)》》
参数:content:str,HTML内容

返回值:None

描述:更新当前可见popup的内容



《《is_popup_visible()》》
参数:无

返回值:bool:
为 True 表示可见
为 False 表示不可见

描述:判断popup是否可见



《《hide_popup()》》
参数:无

返回值:None

描述:隐藏popup



《《is_auto_complete_visible()???》》
ps:auto complete menu
参数:无

返回值:bool:
为 True 表示可见
为 False 表示不可见

描述:判断auto complete 菜单是否可见



《《style()》》
参数:无

返回值:dict

描述:返回所胡全局style的 dict
所有的颜色值都会被转化为十六进制形式，如:#ff0000



《《style_for_scope(scopeName)》》
参数:scopeName

返回值:dict

描述:返回scopeName关联的style的 dict
包括foreground, bold, italic, source_line, source_column 和 source_file 键值对。
如果该scope设置了背景色，也会包含background键值对
foreground 和 background 的颜色值会被转化为十六进制形式，如:#ff0000
ps:style在.sublime-color-scheme文件中定义，在.sublime-syntax文件中被分配给scope



《《set_reference_document(reference)???》》
参数:reference

返回值:None

描述:
Uses the string reference to calculate(计算) the initial(初始的) diff for the incremental diff 



《《reset_reference_document()???》》
ps:incremental diff
参数:无

返回值:None

描述:
Clears the state of the incremental diff for the view 