《《colorSchemes》》
源代码和 prose 的 highlighting 是由 color scheme 控制的.color scheme 通过 syntax 为 scopes 分配颜色和字体样式.
其它用户界面的样式则是由 theme 控制的.theme 控制 buttonss、 select lists、 sidebar 和 tabs.
sublime text 的 color schemes 文件扩展名为 .sublime-color-scheme, 内容为 json 格式. sublime text 同时还支持一个使用 textmate 的子集特色功能: .tmtheme 格式. 




《《example.sublime-color-scheme》》
{
    "name": "example color scheme",
    "globals":
    {
        "background": "rgb(34, 34, 34)",
        "foreground": "#eeeeee",
        "caret": "white"
    },
    "rules":
    [
        {
            "name": "comment(注释)",
            "scope": "comment(注释)",
            "foreground": "#888888"
        },
        {
            "name": "string",
            "scope": "string",
            "foreground": "hsla(50, 100%, 50%, 1)",
        },
        {
            "name": "number",
            "scope": "constant(常数).numeric",
            "foreground": "#7f00ff",
            "font_style": "italic",
        }
    ]
}




《《colors》》
color scheme 中的颜色值有以下几种可用格式: 
hex rgb: 一个 # 后跟6个十六进制数;前两个代表三原色中的红色值(red),中间两个代表三原色中的绿色值(green),最后两个代表三原色中的蓝色值(blue).
当每一对的两个数都相同时,可以进行简写.例如,#3399ee 可以简写为 #39e .

hex rgba: 与 hex rgb 基本相同,只是末尾多了一对代表不透明度的值: aa(值越大越不透明).例如,拥有 b3/ff 不透明度的红色为:#ff0000b3 .
同 hex rgb 本格式也可以简写.例如,#3399eeaa 可以简写为 #39ea .

rgb 函数:
原型:rgb(red,green,blue)
参数:
red:int 类型.取值范围为0至255.代表了三原色中的红色值.
green:int 类型.取值范围为0至255.代表了三原色中的绿色值.
blue:int 类型.取值范围为0至255.代表了三原色中的蓝色值.
示例:红色表示为 rgb(255, 0, 0)

rgba 函数:
原型:rgba(red,green,blue,alpha)
参数:
red,green,blue 同 rgb()
alpha:float 类型.取值范围为0至1.代表了不透明度.
示例:拥有55%不透明度的红色表示为 rgba(255,0,0,0.55)

hsl 函数:
原型:hsl(hue,saturation,lightness)
参数:
hue:int 类型.取值范围为0至360.
saturation:百分数类型.代表了饱和度.
lightness:百分数类型.代表了亮度.
示例:红色表示为 hsl(0,100%,100%)

hsla 函数:
原型:hsla(hue,saturation,lightness,alpha)
hue,saturation,lightness 同 hsl()
alpha 同 rgba()
示例:拥有55%不透明度的红色表示为 hsla(0,100%,100%,0.55)

named: css color names. please note that while some share names with x11 named colors used in .tmtheme files, the actual(实际的) colors tend(趋向于) to differ(<动>不同).

另外,颜色值还可以以变量的形式存在,通过 var(var_name) 的形式引用.
这种方式在通过 minihtml 的 color() 函数,以及 blend(), blenda(), alpha(), saturation() 和 lightness() 调节器调整颜色时,特别有用.



《《color()函数》》
ps:color()函数和 颜色调节器的参数都是用空格分隔,而不是逗号.
原型:color(base_color adjuster)
参数:
base_color:变量引用形式的颜色值.需要被调节的基色.
adjuster:用于调节基色的调节器.


《《blend()调节器》》
原型:blend(blend_color blend_persent <hsl_flag>)
参数:
blend_color:不带 alpha 值(不透明度)的颜色值.将要和基色混合的添加色.
blend_persent:百分数.混合结果颜色中添加色所占比例.
hsl_flag:可选.只有一个可用值:hsl(不带引号).如果指定,则通过 hsl 颜色空间混合颜色.
ps:不同于 blenda() 本调节器不会混合两种颜色的 alpha 值(不透明度),结果色永远采用和基色相同的 alpha 值.
示例:
color(var(base_green) blend(#a2b3c4 30%))
color(var(base_green) blend(#a2b3c4 30% hsl))

                                                                                                                                                                          
《《blenda()调节器》》
原型:blenda(blenda_color blenda_persent <hsl_flag>)
参数:
blenda_persent,hsl_flag:同 blend() 中的 blend_persent 和 hsl_flag.
blenda_color:带 alpha 值的颜色值.将要和基色混合的添加色.
ps:不同于 blend() 本调节器会混合两种颜色的 alpha 值.
示例:
color(var(base_green) blenda(#a2b3c41d 30%))
color(var(base_green) blenda(#a2b3c41d 30% hsl))

                                                                                                                                                                                                                                                                                                         
《《alpha()调节器》》
原型:alpha(replace_alpha)
简写原型:a(replace_alpha)
参数:replace_alpha:float 类型,取值范围为0至1.用于替换基色的 alpha 值的值.
示例:
color(var(base_green) alpha(0.55))
color(var(base_green) a(0.55))


《《saturation()调节器》》
原型:saturation(<increase_flag> adjust_saturation)
简写原型:s(<increase_flag> adjust_saturation)
参数:
increase_flag:可选.有两个可用值:+ 和 - .如果指定为 + ,则会将基色的饱和度设为基色的原饱和度与 adjust_saturation 相加所得值;指定为 - ,则会将基色的饱和度设为基色的原饱和度减去 adjust_saturation 所得值;不指定,则会将基色的饱和度设为 adjust_saturation.
adjust_saturation:百分数类型,取值范围为0%至100%.用于调节基色的饱和度的值.
ps:本调节器在 hsl 颜色空间进行操作.
示例:
color(var(base_green) saturation(90%))
color(var(base_green) s(- 10%))
color(var(base_green) saturation(+ 10%))


《《lightness()调节器》》
原型:lightness(<increase_flag> adjust_lightness)
简写原型:l(<increase_flag> adjust_lightness)
参数:
increase_flag:同 saturation() 中的 increase_flag.
adjust_lightness:百分数类型.用于调节基色的亮度的值
ps:本调节器在 hsl 颜色空间进行操作.
示例:
color(var(base_green) lightness(90%))
color(var(base_green) l(+ 10%))
color(var(base_green) lightness(- 10%))
[
]



 
《《variables》》
变量名可以是由英文字母、数字和 _ 以及 - 组成的字符串.变量值可以是任何有效的颜色格式.
下面是一个使用变量的例子:
{
    "name": "example color scheme",
    "variables":
    {
        "green": "hsla(153, 80%, 40%, 1)",
        "black": "#111",
        "white": "rgb(242, 242, 242)"
    },
    "globals":
    {
        "background": "var(black)",
        "foreground": "var(white)",
        "caret": "color(var(white) alpha(0.8))"
    },
    "rules":
    [
        {
            "name": "comment(注释)",
            "scope": "comment(注释)",
            "foreground": "color(var(black) blend(#fff 50%))"
        },
        {
            "name": "string",
            "scope": "string",
            "foreground": "var(green)",
        },
        {
            "name": "number",
            "scope": "constant(常数).numeric",
            "foreground": "#7f00ff",
            "font_style": "italic",
        }
    ]
}





《《globalSettings》》
全局设置(global settings)包含了所有应用于全局的默认设置,这些设置只在缺省情况下有效,如有更细节的设定,他们会被覆写.

background:
默认背景颜色.

foreground
默认文本颜色.

invisibles
whitespace 的颜色.如未指定,则默认为当前 foreground 的 alpha 值为0.35的颜色.

caret
编辑光标的颜色.

block_caret
块状编辑光标的颜色.

line_highlight
当在设置文件中启用 highlight_line 时,编辑光标所在行的颜色.



《《global_accents》》

misspelling
拼写错误的英文单词下的波浪线的颜色.

fold_marker
代表折叠内容的省略号的颜色.

minimap_border
当在设置文件中启用 draw_minimap_border 时,minimap 中代表当前 viewport 的区域的边框颜色.
ps:只启用 draw_minimap_border 时,只有在鼠标悬停在 minimap 上方时,才会显示 viewport ;同时启用了 always_show_minimap_viewport 时,minimap 中的 viewport 都会一直显示.

accent
可被 theme 引用的颜色.当在设置文件中启用 highlight_modified_tabs 时,默认 theme 将其用作已修改 tabs 的颜色.



《《global_css》》
css 应用于通过 popups 和 phantoms 插入的 minihtml 内容.
想了解支持的 css 属性,请参阅 minihtml 文档的 css 章节.
使用 minihtml 的插件最好为生成的 html 内容的 <body> 标签设置一个唯一的 id 属性,以便 color schemes 可以覆写插件的默认样式.

popup_css
应用于 popups 的 css.

phantom_css
应用于 phantoms 的 css.如未指定,则使用 popup_css.



《《global_gutter》》
gutter
行标栏的背景颜色.

gutter_foreground
行标栏的文本颜色.



《《global_diff》》
行标栏左侧,用于标示本行修改信息——编辑、新增或删除——的小图标(diff markers)的颜色设置.
ps:请参阅 incremental diff 文档的 diff markers 章节.

line_diff_width
diff markers 的宽度,范围从1到8.

line_diff_added
标示新增行的 diff marker 的颜色.

line_diff_modified
标示编辑行的 diff marker 的颜色.

line_diff_deleted
标示删除行的 diff marker 的颜色.



《《global_selection》》
selection
被选中文本的背景色.

selection_foreground
被选中文本的文本色.

selection_border
选中区域的边框颜色.

selection_border_width
选中区域的边框宽度,范围从0到4.

inactive_selection
非焦点 view 中的选中区域的背景色.

inactive_selection_foreground
非焦点 view 中的选中区域的文本色.

selection_corner_style
选中区域的边角样式,可用选项有:round(圆角,默认), cut 和 square(直角).

selection_corner_radius
选中区域的边角半径,只有当 selection_corner_style 为 round 或 cut 时,才有用.



《《global_find》》
highlight
在用 find panel 或 find in files panel 查找内容,有多个匹配项时,非焦点匹配项(other matches)的边框颜色.
ps:find panel 只有在其输入框左侧的六个按钮中的最右边一个(highlight matches)启用时,才会显示 other matches 的边框.

find_highlight
find panel 的焦点匹配项(focus match)的背景色.

find_highlight_foreground
find panel 的焦点匹配项(focus match)的文本色.



《《global_guides》》
guides 的样式由设置文件中的 draw_indent_guides 选项统一控制,是为了方便用户观察缩进而绘制的缩进对齐线.

guide
当设置文件中的 indent_guide_options 选项被设为 "draw_normal" 时,indent guides 所用的颜色.

active_guide
当设置文件中的 indent_guide_options 选项被设为 "draw_active" 时,包含 caret 的 indent 的 guide 所用的颜色.

stack_guide
当设置文件中的 indent_guide_options 选项被设为 "draw_active" 时,包含 caret 的 indent 的父级 indents 的 guides 所用的颜色.



《《global_brackets》》
括号匹配(bracket matching)由设置文件中的 match_brackets 选项统一控制.

brackets_options
与 caret 紧挨着的括号的 bracket matching 样式.接受一个由空格分隔的选项列表.
可用选项有:
underline		下划线样式.
stippled_underline
squiggly_underline
foreground
bold
italic

brackets_foreground
the color to use when drawing the style specified by brackets_options. 

bracket_contents_options
当 caret 在一对括号之间且不与任一括号相临时,该对括号的 bracket matching 样式.接受一个由空格分隔的选项列表.
可用选项有:
underline
stippled_underline
squiggly_underline
foreground

bracket_contents_foreground
the color to use when drawing the style specified by brackets_contents_options. 



《《global_tags》》
标签匹配(tag matching)由设置文件中的 match_tags 选项统一控制.

tags_options
当 caret 在一个 tag 内时,tag 的 tag matching 样式.
接受一个由空格分隔的选项列表.
可用选项有:
underline
stippled_underline
squiggly_underline
foreground

tags_foreground
the color to use when drawing the style specified by tags_options. 



《《global_shadows》》
shadow
当文本区域可水平滚动时,所显示的 shadow 的颜色.

shadow_width
当文本区域可水平滚动时,所显示的 shadow 的宽度.采用设备独立像素单位(dip:device-independent pixels).





《《scopeRules》》
color schemes 通过 scopes 和文本互动. scopes 通过 syntax 被分配给源代码(code)和 prose tokens.
scopes 是由 . 分隔成多个标签(labels)的字符串,labels 所描述的信息从左到右由宏观到具体.
如描述 php 语法中的 if 关键字(keyword)的 scope name 可为: keyword.control.php .



《《scopeRules_matching》》
color_schemes 通过匹配 scope_names 中的 labels 来为 scope 分配颜色和字体样式. labels 的匹配必须从 scope_names 的开头开始,不能从中间开始.
对于为多个 syntaxes 分配颜色和字体样式的 color schemes,只匹配 scope_names 的前几个 labels 是明智的选择;除非想要分配覆写通用配置的细节配置,否则不推荐匹配完整的 scope_names .



《《scopeRules_naming》》
syntaxes 对 scope_names 没有硬性规定,用户可以自由定制.但是为了不同作者的 syntaxes 之间的互用性,官方还是给出了指导规范.请参阅 scope naming 文档的 usage in color schemes 章节.



《《scopeRules_styleRules》》
每一个 scope style rule 都是一个 scope_rule_object ,scope_rule_object 的第一个成员是 scope_key 其 key_name 是 "scope",其 key_value 是一个合法的 scope_name .
后续成员可以是一或多个以下项:
name : scope_rule 的名称,可自由定制.

foreground : 文本颜色.

background : 背景颜色.

selection_foreground : selected 文本的颜色.

font_style : 字体样式,由空格分隔的选项列表,可用选项有:bold 和 italic;underline

foreground_adjust : 由空格分隔的 minihtml color() 函数支持的 adjusters 的列表.用于混合 foreground 和 background.只有在 background key 也指定时才有效.



《《scopeRules_hashed_syntax_highlighting》》
foreground key 支持一种特别的模式:hashed_syntax_highlighting(某些版本中为:semantic highlighting).
scope 所匹配的每一个 token 都会从一个或多个颜色曲线上获得相应的唯一的颜色值.
foreground key 的 value 必须是包含两个或多个哈希端点颜色值(hash_point_color)的 list, sublime text 会创建256个以这些颜色值为端点的线性渐变的线性插入颜色值(linear_interpolation_colors).
ps:颜色渐变在 hsl 颜色空间进行.

as sublime text highlights the tokens(令牌) in a file, it will create a hashed(哈希) value of the token(令牌), and use that to pick one of the 256 linear linear_interpolation_colors . every instance(实例) of a given token(令牌) will use the same color. for example, each instance(实例) of first_name would have the same color, but every instance(实例) of name would have a different color. 

为了使 hashed_syntax_highlighting 的颜色渐变更加明显,list 中的第一个和最后一个 hash_point_color 之间的 hue 差越大越好.
下面是一个 hashed_syntax_highlighting 模式的例子:
{
    "scope": "source - punctuation - keyword",
    "foreground": ["hsl(50, 60%, 70%)", "hsl(300, 60%, 70%)"]
}



《《scopeRules_examples》》
将所有字符串设为绿色:
{
    "name": "strings",
    "scope": "string",
    "foreground": "#00ff00"
}
将所有数字设为红色、粗体、斜体:
{
    "name": "numbers",
    "scope": "constant.numeric",
    "foreground": "#ff0000",
    "font_style": "bold italic"
}





《《customization》》
想要对已有 color_scheme 进行自定义修改,可以在 packages/user 目录下新建和该 color_scheme 文件同名的文件,自建文件中的内容将会覆写 color_scheme 文件内的相同内容.
例如,要修改 monokai color_scheme,新建一个文件 packages/user/monokai.sublime-color-scheme .
并保存以下内容到新建文件内:
{
    "variables":
    {
        "yellow": "hsl(54, 100%, 50%)",
    },
    "globals":
    {
        "background": "hsl(70, 0%, 15%)",
    },
    "rules":
    [
        {
            "name": "python docstrings",
            "scope": "comment.block.documentation.python",
            "foreground": "var(yellow)"
        },
    ]
}
自建文件的 "variables" 和 "globals" objects 的相同内容会混合;"rules" list 的内容则会附加.





《《appendix: css colors》》
aliceblue(爱丽丝蓝)
antiquewhite(古董白)
aqua(湖绿色)
aquamarine
azure
beige
bisque
black
blanchedalmond
blue
blueviolet
brown
burlywood
cadetblue
chartreuse
chocolate
coral
cornflowerblue
cornsilk
crimson
cyan
darkblue
darkcyan
darkgoldenrod
darkgray
darkgreen
darkgrey
darkkhaki
darkmagenta
darkolivegreen
darkorange
darkorchid
darkred
darksalmon
darkseagreen
darkslateblue
darkslategray
darkslategrey
darkturquoise
darkviolet
deeppink
deepskyblue
dimgray
dimgrey
dodgerblue
firebrick
floralwhite
forestgreen
fuchsia
gainsboro
ghostwhite
gold
goldenrod
gray
green
greenyellow
grey(灰色)
honeydew
hotpink
indianred
indigo
ivory
khaki
lavender
lavenderblush
lawngreen
lemonchiffon
lightblue
lightcoral
lightcyan
lightgoldenrodyellow
lightgray
lightgreen
lightgrey
lightpink
lightsalmon
lightseagreen
lightskyblue
lightslategray
lightslategrey
lightsteelblue
lightyellow
lime
limegreen
linen
magenta
maroon
mediumaquamarine
mediumblue
mediumorchid
mediumpurple
mediumseagreen
mediumslateblue
mediumspringgreen
mediumturquoise
mediumvioletred
midnightblue
mintcream
mistyrose
moccasin
navajowhite
navy
oldlace
olive
olivedrab
orange
orangered
orchid
palegoldenrod
palegreen
paleturquoise
palevioletred
papayawhip
peachpuff
peru
pink
plum
powderblue
purple
rebeccapurple
red
rosybrown
royalblue
saddlebrown
salmon
sandybrown
seagreen
seashell
sienna
silver
skyblue
slateblue
slategray
slategrey
snow
springgreen
steelblue
tan
teal
thistle
tomato
turquoise
violet
wheat
white
whitesmoke
yellow
yellowgreen





《《changelog》》
build 3190
增加了 block_caret setting 
build 3189
增加了 line_diff_added 和 line_diff_deleted settings 
build 3186
增加了 line_diff_modified 和 line_diff_width settings 
build 3179
增加了 saturation() 和 lightness() adjusters 
style rules 中增加了 foreground_adjust key