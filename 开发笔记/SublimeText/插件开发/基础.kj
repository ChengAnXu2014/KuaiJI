《《菜单文件名称》》

Main.sublime-menu # 主菜单
Side Bar.sublime-menu
Context.sublime-menu

《《菜单文件格式》》
<<json

[
{
	"id": "my_menu",
	"caption": "我的菜单",
	"children":
	[
		{
			"id" : "ew",
			"caption" : "Aoi",
			"command" : "my_example", //来自命令文件的命令名.
			"args" : {"say" : "Fuck you!!!"}//传给run方法的关键字参数;相当于Python语法的关键字参数:"say"="Fuck you!!!"
		}
	]
}
]

json>>

《《快捷键文件名称》》

Default (Windows).sublime-keymap # Windows系统
Default (Linux).sublime-keymap # Linux系统
Default (OSX).sublimekeymap # OSX系统

《《快捷键文件格式》》
<<json

[
	{
		"keys": ["alt+k"],//命令绑定的快捷键
		"command":"my_example", //来自命令文件的命令名.
		"args" : {"say" : "I'm The Best!!!"}//传给run方法的关键字参数:"say"="The Best!!!"
	}
]

json>>

《《命令文件格式》》

<<py
import sublime
import sublime_plugin

# 创建派生自基类sublime_plugin.TextCommand的类MyExampleCommand .
# 该类名会被去除Command后缀,再由驼峰模式转化为下划线模式,作为命令名.
# 此处即将类名MyExampleCommand去除Command后缀变为MyExample,
# 再由驼峰模式转化为下划线模式,变为my_example ,作为命令名.
# 转化出的命令名作为菜单文件或快捷键文件内容中"command"键的值,
# 就可以通过菜单或快捷键调用命令了.
class MyExampleCommand(sublime_plugin.TextCommand):
	# 默认情况下触发本命令会自动调用下面的run()函数.
	# 如果有参数,也会传递给run函数,并放在默认参数self和edit之后.
	def run(self, edit, say):

		print(say)

py>>

《《插件安装》》

一: 把包(插件项目)目录打包成一个zip文件，
然后把后缀改成.sublime-package;把这个文件放到系统 Packages目录下,重启sublime就安装完成了。

二: 直接把包(插件项目)目录放到Data\Packages\目录下.
通过主菜单:设置->浏览资源包 可以快速打开Data\Packages\目录.
英文菜单是:Preferences->Browse Packages...
PS:Data\Packages\User\目录下保存了所有用户自定义内容,自定义内容不会随插件、软件的更新而被删除.

《《模板生成》》

通过主菜单:
Tools->Developer->New Plugin... 中文:工具->开发者工具->新建插件 # 生成命令文件模板
Tools->Developer->New Snippet... 中文:工具->开发者工具->新建代码片段 # 生成代码片段文件模板
Tolls->Developer->New Synta... 中文:工具->开发者工具->新建语法 # 生成语法文件模板







《《系统Packages》》
系统 Packages 文件夹下的 .sublime-package 包文件本质是 zip 压缩文件，只不过把扩展名改为了 .sublime-package .
在访问这些包时，sublime 会对它们进行实时解压，使过程看起来和访问未压缩内容一样，但是用户自己无法直接访问包内容。
如：用 sublime.find_resources() 方法查找资源文件时，找到的系统 Packages 目录下的包内的资源文件和用户 Packages 目录下的普通文件看起来是一样的。